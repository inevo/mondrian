/*
 * SchemaExplorer.java
 *
 * Created on October 2, 2002, 5:42 PM
 */

package mondrian.gui;

import javax.swing.event.*;
import mondrian.olap.*;

/**
 *
 * @author  sean
 */
public class SchemaExplorer extends javax.swing.JPanel implements TreeSelectionListener {
    MondrianDef.Schema schema;
    SchemaTreeModel model;
    SchemaTreeCellRenderer renderer;
    
    /** Creates new form SchemaExplorer */
    public SchemaExplorer() {
        initComponents();
    }
    
    public SchemaExplorer(MondrianDef.Schema s) {
        this();
        this.schema = s;
        renderer = new SchemaTreeCellRenderer();
        model = new SchemaTreeModel(schema);
       
        tree.setModel(model);
        tree.setCellRenderer(renderer);
        tree.addTreeSelectionListener(this);
        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        propertyTable = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tree = new javax.swing.JTree();

        setLayout(new java.awt.BorderLayout());

        jSplitPane1.setDividerLocation(200);
        jSplitPane1.setToolTipText("null");
        jPanel1.setLayout(new java.awt.BorderLayout());

        propertyTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Property", "Value"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(propertyTable);

        jPanel1.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jSplitPane1.setRightComponent(jPanel1);

        jPanel2.setLayout(new java.awt.BorderLayout());

        jScrollPane1.setViewportView(tree);

        jPanel2.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jSplitPane1.setLeftComponent(jPanel2);

        add(jSplitPane1, java.awt.BorderLayout.CENTER);

    }//GEN-END:initComponents

    /**
     * Called whenever the value of the selection changes.
     * @param e the event that characterizes the change.
     *
     */
    public void valueChanged(TreeSelectionEvent e) {
        Object o = e.getPath().getLastPathComponent();
        if (o instanceof MondrianDef.Column) {
            MondrianDef.Column c = (MondrianDef.Column)o;
            PropertyTableModel ptm = new PropertyTableModel(c, new String[]{"name", "table"});
            propertyTable.setModel(ptm);
        } else if (o instanceof MondrianDef.Cube) {
            MondrianDef.Cube c = (MondrianDef.Cube)o;
            PropertyTableModel ptm = new PropertyTableModel(c, new String[]{"name", "factSchema", "factTable"});
            propertyTable.setModel(ptm);
        } else if (o instanceof MondrianDef.Dimension) {
            MondrianDef.Dimension d = (MondrianDef.Dimension)o;
            PropertyTableModel ptm = new PropertyTableModel(d, new String[]{"name", "foreignKey"});
            propertyTable.setModel(ptm);
        } else if (o instanceof MondrianDef.DimensionUsage) {
            MondrianDef.DimensionUsage du = (MondrianDef.DimensionUsage)o;
            PropertyTableModel ptm = new PropertyTableModel(du, new String[]{"name", "foreignKey", "source"});
            propertyTable.setModel(ptm);
        } else if (o instanceof MondrianDef.ExpressionView) {
            MondrianDef.ExpressionView ev = (MondrianDef.ExpressionView)o;
            PropertyTableModel ptm = new PropertyTableModel(ev, new String[]{"name", "foreignKey", "source"});
            propertyTable.setModel(ptm);
        } else if (o instanceof MondrianDef.Hierarchy) {
            MondrianDef.Hierarchy h = (MondrianDef.Hierarchy)o;
            PropertyTableModel ptm = new PropertyTableModel(h, 
                new String[]{"hasAll", "defaultMember", "memberReaderClass", "primaryKey", "primaryKeyTable", "relation"});
            propertyTable.setModel(ptm);
        } else if (o instanceof MondrianDef.Join) {
            MondrianDef.Join j = (MondrianDef.Join)o;
            PropertyTableModel ptm = new PropertyTableModel(j, 
                new String[]{"left", "leftAlias", "leftKey", "right", "rightAlias", "rightKey"});
            propertyTable.setModel(ptm);
        } else if (o instanceof MondrianDef.Level) {
            MondrianDef.Level l = (MondrianDef.Level)o;
            PropertyTableModel ptm = new PropertyTableModel(l, 
                new String[]{"name", "column", "nameExp", "ordinalColumn", "ordinalExp", "table", "type", "uniqueMembers"});
            propertyTable.setModel(ptm);
        } else if (o instanceof MondrianDef.Measure) {
            MondrianDef.Measure m = (MondrianDef.Measure)o;
            PropertyTableModel ptm = new PropertyTableModel(m, 
                new String[]{"name", "aggregator", "column", "formatString"});
            propertyTable.setModel(ptm);
        } else if (o instanceof MondrianDef.Parameter) {
            MondrianDef.Parameter p = (MondrianDef.Parameter)o;
            PropertyTableModel ptm = new PropertyTableModel(p, 
                new String[]{"name", "value"});
            propertyTable.setModel(ptm);
        } else if (o instanceof MondrianDef.Property) {
            MondrianDef.Property p = (MondrianDef.Property)o;
            PropertyTableModel ptm = new PropertyTableModel(p, 
                new String[]{"name", "column", "type"});
            propertyTable.setModel(ptm);
        } else if (o instanceof MondrianDef.SQL) {
            MondrianDef.SQL s = (MondrianDef.SQL)o;
            PropertyTableModel ptm = new PropertyTableModel(s, 
                new String[]{"cdata", "dialect"});
            propertyTable.setModel(ptm);
        } else if (o instanceof MondrianDef.Table) {
            MondrianDef.Table t = (MondrianDef.Table)o;
            PropertyTableModel ptm = new PropertyTableModel(t, 
                new String[]{"name", "alias", "schema"});
            propertyTable.setModel(ptm);
        } else if (o instanceof MondrianDef.View) {
            MondrianDef.View v = (MondrianDef.View)o;
            PropertyTableModel ptm = new PropertyTableModel(v, 
                new String[]{"alias"});
            propertyTable.setModel(ptm);
        } else if (o instanceof MondrianDef.VirtualCube) {
            MondrianDef.VirtualCube vc = (MondrianDef.VirtualCube)o;
            PropertyTableModel ptm = new PropertyTableModel(vc, 
                new String[]{"name"});
            propertyTable.setModel(ptm);
        } else if (o instanceof MondrianDef.VirtualCubeDimension) {
            MondrianDef.VirtualCubeDimension vc = (MondrianDef.VirtualCubeDimension)o;
            PropertyTableModel ptm = new PropertyTableModel(vc, 
                new String[]{"cubeName"});
            propertyTable.setModel(ptm);
        } else if (o instanceof MondrianDef.VirtualCubeMeasure) {
            MondrianDef.VirtualCubeMeasure vc = (MondrianDef.VirtualCubeMeasure)o;
            PropertyTableModel ptm = new PropertyTableModel(vc, 
                new String[]{"name", "cubeName"});
            propertyTable.setModel(ptm);
        } else {
            PropertyTableModel ptm = new PropertyTableModel(o, new String[]{});
            propertyTable.setModel(ptm);
        }
    }    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable propertyTable;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTree tree;
    private javax.swing.JSplitPane jSplitPane1;
    // End of variables declaration//GEN-END:variables
    
}
