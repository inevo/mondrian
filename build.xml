<!--
  == $Id$
  == This software is subject to the terms of the Common Public License
  == Agreement, available at the following URL:
  == http://www.opensource.org/licenses/cpl.html.
  == (C) Copyright 2001-2003 Kana Software, Inc. and others.
  == All Rights Reserved.
  == You must accept the terms of that agreement to use this software.
  == jhyde, 31 October, 2001
  -->
<project name="mondrian" default="compile">
  <property environment="env"/>
  <property name="project.location" location="."/>
  <property name="lib.location" location="${project.location}/lib"/>
  <property file="${project.location}/build.properties"/>
  <property file="${project.location}/mondrian.properties"/>
  <property name="project.build.debug" value="on"/>
  <property name="Name" value="Mondrian"/>
  <property name="name" value="mondrian"/>
  <property name="version" value="1.0"/>

  <!--
    ===================================================================
    Set the properties related to paths
    ===================================================================
  -->
  <property name="src.dir" value="src"/>
  <property name="testsrc.dir" value="testsrc"/>
  <property name="java.dir" value="${src.dir}/main"/>
  <property name="javatest.dir" value="${testsrc.dir}/main"/>
  <property name="etc.dir" value="${src.dir}/etc"/>
  <property name="lib.dir" value="lib"/>
  <property name="testlib.dir" value="testlib"/>
  <property name="doc.dir" value="doc"/>
  <property name="resource.location" location="resource"/>
  <property name="javadoc.dir" value="${doc.dir}/api"/>
  <property name="classes.dir" value="classes"/>
  <property name="testclasses.dir" value="testclasses"/>
  <property name="dist.name" value="${name}-${version}"/>
  <property name="dist.base" value="distribution"/>
  <property name="dist.dir" value="dist"/>
  <property name="demo.dir" value="demo"/>
  <property name="webapp.dir" value="webapp"/>
  <property name="dist.src.file" value="${dist.dir}/${dist.name}-src.zip"/>
  <property name="dist.data.file" value="${dist.dir}/${name}-data.zip"/>
  <property name="dist.data.mysql.file" value="${dist.dir}/${name}-data-mysql.zip"/>
  <property name="dist.bin.file" value="${dist.dir}/${dist.name}.zip"/>
  <property name="jar.file" value="${lib.dir}/${name}.jar"/>
  <property name="workbench.jar.file" value="workbench.jar"/>
  <property name="resource.jar.file" value="${lib.dir}/mondrian-resource.jar"/>
  <property name="xom.jar.file" value="${lib.dir}/mondrian-xom.jar"/>
  <property name="war.file" value="${lib.dir}/${name}.war"/>
  <property name="jdk.home" value="${env.JAVA_HOME}"/>
  <property name="catalina.home" value="${env.CATALINA_HOME}"/>
  <property name="xalan.home" value="${env.XALAN_HOME}"/>
  <property name="junit.home" value="${env.JUNIT_HOME}"/>
  <property name="weblogic.home" value="${env.WEBLOGIC_HOME}"/>
  <property name="generated.java.files" value="
${java.dir}/mondrian/olap/Parser.java,
${java.dir}/mondrian/olap/ParserSym.java,
${java.dir}/mondrian/resource/ResourceDef.java,
${java.dir}/mondrian/olap/MondrianDef.java,
${java.dir}/mondrian/xom/MetaDef.java,
${java.dir}/mondrian/olap/MondrianResource*.java,
${java.dir}/mondrian/olap/MondrianResource*.properties,
${demo.dir}/monrg/source/happy/BirthdayResource*.java,
${demo.dir}/monrg/source/happy/BirthdayResource*.properties,
${etc.dir}/mondrian/web/jsp/**/*.java"/>
  <property name="generated.lib.files" value="
${lib.dir}/mondrian.jar,
${lib.dir}/mondrian.war,
${lib.dir}/mondrian.xml,
${lib.dir}/web.xml,
${lib.dir}/ant.jar,
${lib.dir}/optional.jar,
${lib.dir}/xalan.jar,
${lib.dir}/xercesImpl.jar,
${lib.dir}/xml-apis.jar,
${lib.dir}/commons-dbcp.jar,
${lib.dir}/commons-pool.jar,
${testlib.dir}/junit.jar
demo/mysql/FoodMartDropTables.sql,
demo/mysql/FoodMartData.sql"/>

  <path id="project.classpath">
    <pathelement location="${classes.dir}"/>
    <pathelement location="${lib.dir}/servlet.jar"/>
    <pathelement location="${lib.dir}/commons-dbcp.jar"/>
    <pathelement location="${lib.dir}/commons-collections.jar"/>
    <pathelement location="${lib.dir}/commons-pool.jar"/>
    <pathelement location="${lib.dir}/javacup.jar"/>
    <pathelement location="${lib.dir}/mof.jar"/>
    <pathelement location="${lib.dir}/jmi.jar"/>
    <pathelement location="${lib.dir}/xalan.jar"/>
    <pathelement location="${lib.dir}/xml-apis.jar"/>
    <pathelement location="${lib.dir}/xercesImpl.jar"/>
    <!-- CLASSPATH must contain xml-apis.jar, xercesImpl.jar, javacup.jar -->
    <pathelement path="${env.CLASSPATH}"/>
    <!-- Weblogic must be after xml-apis.jar and xercesImpl.jar, because it
         contains an incompatible version of xerces. -->
    <pathelement location="${weblogic.home}/lib/weblogic.jar"/>
    <pathelement location="${ant.home}/lib/ant.jar"/>
    <pathelement location="${ant.home}/lib/optional.jar"/>
  </path>

  <path id="project.test.classpath">
    <path refid="project.classpath"/>
    <pathelement location="${testlib.dir}/junit.jar"/>
    <pathelement location="${testclasses.dir}"/>
  </path>

  <path id="project.boot.classpath">
    <path refid="project.classpath"/>
    <pathelement location="${resource.jar.file}"/>
    <pathelement location="${xom.jar.file}"/>
  </path>

  <taskdef name="javacup" classname="java_cup.JavaCUPTask">
    <classpath refid="project.boot.classpath"/>
  </taskdef>
  <taskdef name="xomgen" classname="mondrian.xom.XOMGenTask">
    <classpath refid="project.boot.classpath"/>
  </taskdef>

  <target name="sniff"
        description="Figures out which components are available">
    <available property="weblogic.available"
        classname="weblogic.jspc"
        classpathref="project.classpath"/>
  </target>

  <!--
    ===================================================================
    Properties for running the FoodMart test. (Override them by
    editing build.properties)
    ===================================================================
  -->

  <!-- Comma-separated list of jdbc drivers. Typical drivers:
       sun.jdbc.odbc.JdbcOdbcDriver, org.hsqldb.jdbcDriver,
       oracle.jdbc.OracleDriver, com.mysql.jdbc.Driver. Remember to
       include the driver on your CLASSPATH! -->
  <property name="mondrian.jdbcDrivers"
      value="sun.jdbc.odbc.JdbcOdbcDriver"/>
  <!-- Connect string to the relational database. -->
  <property name="mondrian.foodmart.jdbcURL.access"
      value="jdbc:odbc:MondrianFoodMart"/>
  <property name="mondrian.foodmart.jdbcURL.hsqldb"
      value="jdbc:hsqldb:demo/hsql/FoodMart"/>
  <property name="mondrian.foodmart.jdbcURL.mysql"
      value="jdbc:mysql://localhost/foodmart?user=foodmart&#38;password=foodmart"/>
  <property name="mondrian.foodmart.jdbcURL.oracle"
      value="jdbc:oracle:oci8:foodmart/foodmart@realm1"/>
  <property name="mondrian.foodmart.jdbcURL.postgres"
      value="jdbc:??"/>
  <property name="mondrian.foodmart.jdbcURL"
      value="${mondrian.foodmart.jdbcURL.access}"/>
  <!-- URL of the catalog definition. -->
  <property name="mondrian.foodmart.catalogURL"
      value="file:///${project.location}/${demo.dir}/FoodMart.xml"/>

  <target name="help">
      <echo>
      You must specify a specific project target when using the ANT build.
      Targets are one of the following:
      - all
          Cleans, compiles all classes, and runs a simple test.
      - compile
          Compiles functional classes only.
      - clean
          Deletes build output.
      - test
          Runs a simple test.
      - info
          shows configuration info
      </echo>
  </target>

  <target name="info">
  <echo>==============================================================</echo>
  <echo>| Mondrian configuration info                                |</echo>
  <echo>==============================================================</echo>
  <echo>project.location      = ${project.location}</echo>
  <echo>jdk.home              = ${env.JAVA_HOME}</echo>
  <echo>catalina.home         = ${env.CATALINA_HOME}</echo>
  <echo>xalan.home            = ${env.XALAN_HOME}</echo>
  <echo>junit.home            = ${env.JUNIT_HOME}</echo>
  <echo>weblogic.home         = ${env.WEBLOGIC_HOME}</echo>
  <echo>mondrian.foodmart.catalogURL = ${mondrian.foodmart.catalogURL}</echo>
  <echo>==============================================================</echo>
  </target>

  <target name="all" depends="clean,compile,test"/>

  <target name="clean">
      <delete includeEmptyDirs="true" quiet="true">
          <fileset dir="${classes.dir}" includes="**/*.class,**/*.properties"/>
          <fileset dir="." includes="${generated.java.files},${generated.lib.files}"/>
      </delete>
  </target>

  <target name="prepare">
    <mkdir dir="${classes.dir}"/>
    <mkdir dir="${testclasses.dir}"/>
    <mkdir dir="${testlib.dir}"/>
  </target>

  <target name="compile" depends="
copy-jars,
sniff,
prepare,
parser,
compile.xom,
generate.resources,
def,
compile.jsp.maybe,
compile.java,
copy.properties"/>

  <target name="compile.xom">
    <javac
        srcdir="${java.dir}"
        destdir="${classes.dir}"
        debug="${project.build.debug}"
        classpathref="project.boot.classpath"
        source="1.4">
      <include name="mondrian/xom/**/*.java" />
    </javac>
  </target>

  <target name="compile.resgen">
    <xomgen
        model="${java.dir}/mondrian/resource/Resource.xml"
        destdir="${java.dir}"
        classname="mondrian.resource.ResourceDef"
        dtdname="Resource.dtd"/>
    <javac
        srcdir="${java.dir}"
        destdir="${classes.dir}"
        debug="${project.build.debug}"
        classpathref="project.classpath"
        source="1.4">
      <include name="mondrian/resource/*.java" />
    </javac>
  </target>

  <target name="generate.resources" depends="compile.resgen">
    <taskdef name="resgen" classname="mondrian.resource.ResourceGenTask">
      <classpath refid="project.classpath"/>
    </taskdef>

    <resgen srcdir="${java.dir}" locales="en_US,de_DE">
      <include name="mondrian/olap/MondrianResource.xml"/>
    </resgen>

  </target>

  <target name="compile.java">
    <javac
        srcdir="${java.dir}"
        destdir="${classes.dir}"
        debug="${project.build.debug}"
        classpathref="project.classpath"
        source="1.4">
      <include name="mondrian/**/*.java"/>
      <include name="javax/**/*.java"/>
      <include name="org/**/*.java"/>
    </javac>
  </target>

  <target name="compile.tests" depends="compile.java">
    <javac
        srcdir="${javatest.dir}"
        destdir="${testclasses.dir}"
        debug="${project.build.debug}"
        classpathref="project.test.classpath"
        source="1.4">
        <include name="mondrian/**/*.java"/>
    </javac>
  </target>

  <target name="copy.properties">
    <copy todir="${classes.dir}">
      <fileset dir="${java.dir}" includes="**/*.properties"/>
    </copy>
  </target>

  <target name="parser">
    <javacup
        srcdir="${java.dir}"
        input="${java.dir}/mondrian/olap/Parser.cup"
        interface="true"/>
  </target>

  <target name="def">
    <xomgen
        model="${java.dir}/mondrian/xom/Meta.xml"
        destdir="${java.dir}"
        classname="mondrian.xom.MetaDef"
        dtdname="meta.dtd"/>
    <xomgen
        model="${java.dir}/mondrian/olap/Mondrian.xml"
        destdir="${java.dir}"
        classname="mondrian.olap.MondrianDef"
        dtdname="mondrian.dtd"/>
    <copy file="${java.dir}/mondrian/olap/mondrian.dtd"
        todir="${lib.dir}"/>
  </target>

  <target name="compile.jsp.maybe" depends="compile.java"
      if="weblogic.available"
      description="Compiles jsp pages, but only if weblogic is available">
    <antcall target="compile.jsp"/>
  </target>

  <target name="compile.jsp"
      description="Compiles jsp pages, fails if weblogic is not available.">
    <mkdir dir="${etc.dir}"/>
    <wljspc src="${webapp.dir}" dest="${etc.dir}"
        package="mondrian.web.jsp">
      <classpath refid="project.classpath"/>
      <include name="**/*.jsp"/>
    </wljspc>
  </target>

  <!-- Before you run it, you will need to set the
       "mondrian.jdbcDrivers", "mondrian.foodmart.jdbcURL", and
       "mondrian.foodmart.catalogURL" properties.  -->

  <target name="FoodMartTest"
      description="Runs a few queries using the FoodMart schema.">
    <java classpathref="project.classpath" classname="mondrian.test.Main"
        fork="yes">

      <sysproperty key="mondrian.jdbcDrivers"	value="${mondrian.jdbcDrivers}"/>
      <sysproperty key="mondrian.test.foodmart.catalogURL"	value="${mondrian.foodmart.catalogURL}"/>

      <!-- mondrian.test.connectString is the mondrian connect-string.
           Provider must be 'mondrian'. Jdbc is the  Catalog is the  -->
      <sysproperty key="mondrian.test.connectString"	value="Provider=mondrian;Jdbc='${mondrian.foodmart.jdbcURL}';Catalog='${mondrian.foodmart.catalogURL}';JdbcUser='${mondrian.foodmart.jdbcUser}';JdbcPassword='${mondrian.foodmart.jdbcPassword}'"/>

    </java>
  </target>

  <!-- Same prerequisites as FoodMartTest -->
  <target name="test" description="Runs all JUnit tests.">
    <antcall target="test-dbms"/>
  </target>

  <target name="test-access" description="Runs all JUnit tests on Access.">
    <antcall target="test-dbms">
      <param name="mondrian.foodmart.jdbcURL" value="${mondrian.foodmart.jdbcURL.access}"/>
    </antcall>
  </target>

  <target name="test-mysql" description="Runs all JUnit tests on MySQL.">
    <antcall target="test-dbms">
      <param name="mondrian.foodmart.jdbcURL" value="${mondrian.foodmart.jdbcURL.mysql}"/>
    </antcall>
  </target>

  <target name="test-oracle" description="Runs all JUnit tests on Oracle.">
    <antcall target="test-dbms">
      <param name="mondrian.foodmart.jdbcURL" value="${mondrian.foodmart.jdbcURL.oracle}"/>
      <param name="mondrian.jdbcDrivers" value="oracle.jdbc.OracleDriver"/>
    </antcall>
  </target>

  <target name="test-postgres" description="Runs all JUnit tests on Postgres.">
    <antcall target="test-dbms">
      <param name="mondrian.foodmart.jdbcURL" value="${mondrian.foodmart.jdbcURL.postgres}"/>
    </antcall>
  </target>

  <target name="test-dbms" depends="compile"
      description="
Runs all JUnit tests, using the given database connection
in {mondrian.foodmart.jdbcURL}.">
    <echo>Connecting to ${mondrian.foodmart.jdbcURL}</echo>
    <java classpathref="project.test.classpath" classname="mondrian.test.Main"
        fork="yes">

      <sysproperty key="mondrian.jdbcDrivers"     	value="${mondrian.jdbcDrivers}"/>
      <sysproperty key="mondrian.foodmart.jdbcURL"	value="${mondrian.foodmart.jdbcURL}"/>
      <sysproperty key="mondrian.test.foodmart.catalogURL"	value="${mondrian.foodmart.catalogURL}"/>

      <sysproperty key="mondrian.test.connectString"	value="Provider=mondrian;Jdbc='${mondrian.foodmart.jdbcURL}';Catalog='${mondrian.foodmart.catalogURL}'"/>

    </java>
  </target>

<target name="junit-main" depends="compile,compile.tests">
    <mkdir dir="junit-results"/>
    <junit printsummary="yes" fork="yes" haltonfailure="no" >
        <classpath>
            <path refid="project.test.classpath"/>
        </classpath>
        <sysproperty key="mondrian.jdbcDrivers"     		value="${mondrian.jdbcDrivers}"/>
        <sysproperty key="mondrian.test.connectString"		value="Provider=mondrian;Jdbc='${mondrian.foodmart.jdbcURL}';Catalog='${mondrian.foodmart.catalogURL}'"/>
        <sysproperty key="mondrian.test.foodmart.catalogURL"	value="${mondrian.foodmart.catalogURL}"/>

        <formatter type="xml" />

        <batchtest fork="yes" todir="junit-results">
            <fileset dir="${testclasses.dir}">
              <include name="mondrian/test/**/*Test*.class" />
              <exclude name="mondrian/test/**/*Testable*.class" />
              <exclude name="mondrian/test/**/*TestContext*.class" />
              <exclude name="mondrian/test/**/TestCaseForker.class" />
              <exclude name="mondrian/test/**/FoodMartTestCase.class" />
              <exclude name="mondrian/test/**/*$*.class" />
            </fileset>
        </batchtest>
    </junit>

    <junitreport todir="junit-results">
      <fileset dir="junit-results">
        <include name="TEST-*.xml"/>
      </fileset>
      <report format="frames" todir="junit-results/html"/>
    </junitreport>

  </target>

  <target name="etags">
    <exec dir="${project.location}" executable="find" output="javaFiles">
      <arg line=". -name &quot;*.java&quot; -print"/>
    </exec>
    <exec dir="${project.location}" executable="ctags">
      <arg line="-e"/>
      <arg line="-L javaFiles"/>
    </exec>
    <delete file="${project.location}/javaFiles" quiet="true"/>
  </target>

  <target name="version">
    <echo message="Mondrian ${version}" file="VERSION.txt"/>
  </target>

  <target name="srczip" depends="version">
    <mkdir dir="${dist.dir}" />
    <delete file="${dist.src.file}"/>
    <zip
        zipfile="${dist.src.file}"
        update="true">
      <zipfileset
          dir="."
          prefix="${dist.name}"
          includes="
**/*.css,
**/*.cup,
**/*.gif,
**/*.html,
**/*.java,
**/*.mf,
**/*.xsl,
${java.dir}/**/*.properties,
${java.dir}/mondrian/olap/MondrianResource.xml,
${java.dir}/mondrian/resource/Resource.xml,
${java.dir}/mondrian/olap/Mondrian.xml,
${java.dir}/mondrian/xom/Meta.xml,
${java.dir}/javax/jmi/model/resources/mof.xml,
${lib.dir}/mondrian-xom.jar,
${lib.dir}/mondrian-resource.jar,
${lib.dir}/javacup.jar,
${lib.dir}/jmi.jar,
${lib.dir}/mof.jar,
${webapp.dir}/WEB-INF/web*.xml,
${webapp.dir}/**/*.jsp,
${webapp.dir}/WEB-INF/*.xsl,
${webapp.dir}/WEB-INF/*.tld,
build.xml,
build.bat,
build.sh,
build.properties,
mondrian.properties,
LICENSE.html,
README.txt,
VERSION.txt,
${demo.dir}/FoodMart.xml"
          excludes="
${javadoc.dir}/**,
**/_vti*/*,
**/*~,
**/junit-results/**,
${generated.java.files}" />
    </zip>
  </target>

  <target name="data-zip">
    <mkdir dir="${dist.dir}" />
    <delete file="${dist.data.file}"/>
    <zip
        zipfile="${dist.data.file}"
        update="true">
      <!-- We do not use 'prefix="${dist.name}"', cuz we don't want to issue a
           new data file each release. -->
      <zipfileset
          dir="."
          includes="LICENSE.html,
README.txt,
VERSION.txt,
demo/FoodMartData.sql,
demo/FoodMartTables.sql,
demo/FoodMartDropTables.sql,
demo/FoodMartIndexes.sql,
demo/mysql/FoodMartTables.sql,
demo/oracle/FoodMartData.sql,
demo/oracle/FoodMartDropTables.sql,
demo/oracle/FoodMartTables.sql,
demo/oracle/FoodMartIndexes.sql,
demo/access/MondrianFoodMart.mdb,
demo/**/*.pl,
demo/**/*.sh"
          excludes="demo/FoodMart.xml,
**/*~"/>
    </zip>
  </target>

  <target name="data-mysql-zip">
    <echo>(This may take up to 20 minutes. Please be patient.)</echo>
    <mkdir dir="${dist.dir}" />
    <delete file="${dist.data.mysql.file}"/>
    <copy file="demo/FoodMartDropTables.sql" todir="demo/mysql/FoodMartDropTables.sql"/>
    <tempfile property="mysql-temp-file"/>
    <unzip src="demo/mysql/foodmart.zip" dest="${mysql-temp-file}">
      <patternset includes="foodmart.sql"/>
    </unzip>
    <echo>mysql-temp-file=${mysql-temp-file}</echo>
    <zip
        zipfile="${dist.data.mysql.file}"
        update="true">
      <!-- We do not use 'prefix="${dist.name}"', cuz we don't want to issue a
           new data file each release. -->
      <zipfileset
          dir="."
          prefix="mondrian-data"
          includes="LICENSE.html,
README.txt,
VERSION.txt,
demo/mysql/INSTALL.txt"/>
      <zipfileset
          dir="${mysql-temp-file}"
          prefix="mondrian-data/demo/mysql"
          includes="foodmart.sql"/>
    </zip>
    <delete dir="${mysql-temp-file}"/>
  </target>

  <target name="export.foodmart.oracle">
    <exec dir="${demo.dir}/oracle" executable="${env.ORACLE_HOME}/bin/exp">
      <arg line="userid=foodmart/foodmart@realm1"/>
      <arg line="file=FoodMart.dmp"/>
      <arg line="owner=FOODMART"/>
    </exec>
  </target>

  <target name="release" depends="binzip"/>

  <target name="binzip" depends="version,war,javadoc,srczip">
    <mkdir dir="${dist.dir}" />
    <delete file="${dist.bin.file}"/>
    <zip zipfile="${dist.bin.file}">
      <zipfileset
          dir="."
          prefix="${dist.name}"
          includes="
${doc.dir}/**/*,
bin/mondrian.properties,
bin/runtime.xml,
bin/mondrian.bat,
bin/mondrian.sh,
bin/README.html,
${dist.src.file},
${war.file},
lib/mondrian.dtd,
LICENSE.html,
README.txt,
VERSION.txt"
          excludes="
**/*~,
**/_vti*/*,
**/*.psp,
${doc.dir}/api/src-html/**/*"/>
    </zip>
  </target>

  <target name="jar" depends="compile">
    <mkdir dir="${lib.dir}" />
    <zip
        zipfile="${jar.file}"
        update="true">
      <zipfileset
          dir="${classes.dir}"
          includes="
**/*.class,
**/*.properties"/>
      <zipfileset
          dir="."
          includes="
LICENSE.html,
README.txt,
VERSION.txt"/>
    </zip>
  </target>

  <target name="bootjar"
      description="Builds a jar file of the classes we need in order to run ant; when the new versions have built, we can replace them. Run this target when the bootstrap files have changed so much that you can't bootstrap, and you need o generate a new mondrian-xom.jar or mondrian-resource.jar to check in to source control.">
    <mkdir dir="${lib.dir}" />

    <delete file="${xom.jar.file}"/>
    <jar jarfile="${xom.jar.file}">
      <fileset
          dir="${classes.dir}"
          includes="mondrian/xom/**/*.class"/>
    </jar>

    <delete file="${resource.jar.file}"/>
    <jar jarfile="${resource.jar.file}">
      <fileset
          dir="${classes.dir}"
          includes="mondrian/resource/**/*.class"/>
    </jar>
  </target>

  <target name="javadoc">
    <mkdir dir="${javadoc.dir}" />
    <delete quiet="true" file="${javadoc.dir}/index.html"/>
    <javadoc sourcepath="${java.dir}"
        classpathref="project.classpath"
        destdir="${javadoc.dir}"
        packagenames="mondrian.*,javax.*,org.omg.*"
        overview="${java.dir}/overview.html"
        footer="&lt;a href=&quot;http://sourceforge.net/projects/mondrian&quot;&gt;&lt;img src=&quot;http://sourceforge.net/sflogo.php?group_id=35302&#38;type=1&quot; width=&quot;88&quot; height=&quot;31&quot; border=&quot;0&quot; alt=&quot;SourceForge.net_Logo&quot;&gt;&lt;/a&gt;"
        author="true"
        source="1.4"
        additionalparam="-linksource">
      <link href="http://javadoc.dyndns.org/joogle/api"/>
<!--
      <link href="http://java.sun.com/j2se/1.4/docs/api/"/>
      <link href="http://www.junit.org/junit/javadoc/3.7/"/>
      <link href="http://java.sun.com/products/servlet/2.2/javadoc/"/>
 -->
    </javadoc>
    <copy file="${java.dir}/mondrian/xom/meta.xml"
        todir="${javadoc.dir}/mondrian/xom"/>
    <copy file="${java.dir}/mondrian/resource/resource.xml"
        todir="${javadoc.dir}/mondrian/resource"/>
    <copy file="${java.dir}/mondrian/olap/mondrian.xml"
        todir="${javadoc.dir}/mondrian/olap"/>
  </target>

  <target name="upload-javadoc" depends="javadoc" description="
Copies javadoc to sourceforge, where it will be accessible via
http://mondrian.sourceforge.net/api/index.html.
You should set pscp.user, pscp.password and pscp.path in build.properties">
    <exec executable="pscp.exe">
      <arg line="-pw ${pscp.password}"/>
      <arg line="-r ${javadoc.dir}"/>
      <arg line="${pscp.user}:${pscp.path}"/>
    </exec>
  </target>

    <target name="copy-jars" description="
Copy .jar files into lib, so that the same files are available to
build mondrian.war as in the runtime environment.">
<!--
        <copy todir="${lib.dir}">
          <fileset dir="${ant.home}/lib" includes="ant.jar,optional.jar"/>
          <fileset dir="${xalan.home}/bin" includes="xalan.jar,xml-apis.jar,xercesImpl.jar"/>
          <fileset dir="${catalina.home}/common/lib" includes="commons-dbcp.jar,commons-pool.jar,commons-collections.jar"/>
        </copy>
-->
        <extension id="junit.ext" extensionName="junit"/>
        <jarlib-resolve property="junit.library" failOnError="false" checkExtension="false">
            <extension refid="junit.ext"/>
            <location location="${testlib.dir}/junit.jar"/>
            <url url="http://gump.covalent.net/jars/latest/junit/junit.jar" destfile="${testlib.dir}/junit.jar"/>
        </jarlib-resolve>

        <extension id="commons-dbcp.ext" extensionName="org.apache.commons.dbcp"/>
        <jarlib-resolve property="commons-dbcp.library" failOnError="false" checkExtension="false">
            <extension refid="commons-dbcp.ext"/>
            <location location="${lib.dir}/commons-dbcp.jar"/>
            <url url="http://gump.covalent.net/jars/latest/jakarta-commons/commons-dbcp.jar" destfile="${lib.dir}/commons-dbcp.jar"/>
        </jarlib-resolve>

        <extension id="commons-pool.ext" extensionName="org.apache.commons.pool"/>
        <jarlib-resolve property="commons-pool.library" failOnError="false" checkExtension="false">
            <extension refid="commons-pool.ext"/>
            <location location="${lib.dir}/commons-pool.jar"/>
            <url url="http://gump.covalent.net/jars/latest/jakarta-commons/commons-pool.jar" destfile="${lib.dir}/commons-pool.jar"/>
        </jarlib-resolve>

        <extension id="commons-collections.ext" extensionName="org.apache.commons.collections"/>
        <jarlib-resolve property="commons-collections.library" failOnError="false" checkExtension="false">
            <extension refid="commons-collections.ext"/>
            <location location="${lib.dir}/commons-collections.jar"/>
            <url url="http://gump.covalent.net/jars/latest/jakarta-commons/commons-collections.jar" destfile="${lib.dir}/commons-collections.jar"/>
        </jarlib-resolve>

        <extension id="xalan.ext" extensionName="org.apache.xalan"/>
        <jarlib-resolve property="xalan.library" failOnError="false" checkExtension="false">
            <extension refid="xalan.ext"/>
            <location location="${lib.dir}/xalan.jar"/>
            <url url="http://gump.covalent.net/jars/latest/xml-xalan/xalan.jar" destfile="${lib.dir}/xalan.jar"/>
        </jarlib-resolve>

        <extension id="xml.ext" extensionName="org.xml"/>
        <jarlib-resolve property="xml.library" failOnError="false" checkExtension="false">
            <extension refid="xml.ext"/>
            <location location="${lib.dir}/xml-apis.jar"/>
            <url url="http://gump.covalent.net/jars/latest/xml-commons/xml-apis.jar" destfile="${lib.dir}/xml-apis.jar"/>
        </jarlib-resolve>

        <extension id="xerces.ext" extensionName="org.apache.xerces"/>
        <jarlib-resolve property="xerces.library" failOnError="false" checkExtension="false">
            <extension refid="xerces.ext"/>
            <location location="${lib.dir}/xercesImpl.jar"/>
            <url url="http://gump.covalent.net/jars/latest/xml-xerces2/xercesImpl.jar" destfile="${lib.dir}/xercesImpl.jar"/>
        </jarlib-resolve>
    </target>

  <target name="war" depends="jar,copy-jars" description="
Creates mondrian.war based upon jpivot.war.
Assumes that mondrian.jar exists (use 'jar' target)">
    <filter filtersfile="mondrian.properties"/>
    <mkdir dir="${lib.dir}" />
    <delete file="${war.file}"/>
    <copy file="${lib.dir}/jpivot.war" tofile="${war.file}"/>
    <delete file="${lib.dir}/web.xml"/>
    <copy file="${webapp.dir}/WEB-INF/web-jpivot.xml"
        filtering="true" tofile="${lib.dir}/web.xml"/>
    <war warfile="${war.file}"
        update="yes"
        webxml="${lib.dir}/web.xml">
      <webinf dir="${webapp.dir}/WEB-INF" excludes="web.xml"/>
	  <!-- our FoodMart.xml may be newer than jpivot's -->
      <webinf dir="${demo.dir}" prefix="WEB-INF/queries" includes="FoodMart.xml"/>
      <fileset dir="${webapp.dir}" excludes="WEB-INF/**/*"/>
	  <!-- should already contain javacup.jar, xalan.jar, junit.jar -->
      <lib dir="${lib.dir}" includes="
${name}.jar,
ant.jar,
jmi.jar,
mof.jar,
optional.jar,
commons-pool.jar,
commons-dbcp.jar,
" excludes="
javacup.jar,
xalan.jar,
xercesImpl.jar,
xml-apis.jar,
"/>
    </war>
  </target>

  <target name="war-no-jpivot" description="
Creates mondrian.war.
Assumes that mondrian.jar exists (use 'jar' target),
and lib contains ant.jar, junit.jar etc. (use 'copy-jars' target)">
    <filter filtersfile="mondrian.properties"/>
    <mkdir dir="${lib.dir}" />
    <delete file="${war.file}"/>
    <delete file="${lib.dir}/web.xml"/>
    <copy file="${webapp.dir}/WEB-INF/web.xml"
        filtering="true" todir="${lib.dir}"/>
    <war warfile="${war.file}"
        webxml="${lib.dir}/web.xml">
      <webinf dir="${webapp.dir}/WEB-INF" excludes="web.xml"/>
      <webinf dir="${demo.dir}" includes="FoodMart.xml"/>
      <fileset dir="${webapp.dir}" excludes="WEB-INF/**/*"/>
      <lib dir="${lib.dir}" includes="
${name}.jar,
javacup.jar,
jmi.jar,
mof.jar,
xalan.jar"/>
    </war>
  </target>

  <target name="deploy-war" depends="war">
    <delete dir="${catalina.home}/webapps/mondrian"/>
    <copy file="${war.file}"
        todir="${catalina.home}/webapps"/>
  </target>

  <target name="setup-compile-farm">
    <echo>Copy junit</echo>
    <exec executable="pscp.exe">
      <arg line="-unsafe -q -v -pw ${cf.password} -r"/>
      <arg line="${junit.home}"/>
      <arg line="${cf.user}:${cf.path}/junit3.7"/>
    </exec>
    <echo>Copy ant</echo>
    <exec executable="pscp.exe">
      <arg line="-unsafe -q -v -pw ${cf.password} -r"/>
      <arg line="${ant.home}"/>
      <arg line="${cf.user}:${cf.path}/jakarta-ant-1.5"/>
    </exec>
    <echo>Copy xalan</echo>
    <exec executable="pscp.exe">
      <arg line="-unsafe -q -v -pw ${cf.password} -r"/>
      <arg line="${xalan.home}"/>
      <arg line="${cf.user}:${cf.path}/xalan-j_2_4_D1"/>
    </exec>
    <echo>Copy tomcat</echo>
    <exec executable="pscp.exe">
      <arg line="-unsafe -q -v -pw ${cf.password} -r"/>
      <arg line="${catalina.home}"/>
      <arg line="${cf.user}:${cf.path}/jakarta-tomcat-4.0.4"/>
    </exec>
  </target>

  <target name="workbench" depends="compile">
    <jar jarfile="${workbench.jar.file}" manifest="misc/workbench-manifest.mf">
      <fileset
          dir="${classes.dir}"
          includes="**/*.class"/>
      <fileset
          dir="."
          includes="images/*.*"/>
    </jar>

  </target>
</project>
