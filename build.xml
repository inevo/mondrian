<!--
  == $Id$
  == This software is subject to the terms of the Common Public License
  == Agreement, available at the following URL:
  == http://www.opensource.org/licenses/cpl.html.
  == Copyright (C) 2001-2003 Kana Software, Inc.
  == Copyright (C) 2001-2008 Julian Hyde and others.
  == All Rights Reserved.
  == You must accept the terms of that agreement to use this software.
  -->
<project name="mondrian" default="all">
  <property environment="env"/>
  <property name="project.location" location="${basedir}"/>
  <property name="lib.location" location="${project.location}/lib"/>
  <property file="${project.location}/build.properties"/>
  <property file="${project.location}/mondrian.properties"/>
  <property name="project.build.debug" value="on"/>
  <property name="Name" value="Mondrian"/>
  <property name="name" value="mondrian"/>
  <property name="version" value="3.0.1.10736"/>
  <property name="vendor" value="Pentaho"/>

  <!--
    ===================================================================
    Set the properties related to paths
    ===================================================================
  -->
  <property name="src.dir" value="src"/>
  <property name="testsrc.dir" value="testsrc"/>
  <property name="java.dir" value="${src.dir}/main"/>
  <property name="javatest.dir" value="${testsrc.dir}/main"/>
  <property name="etc.dir" value="${src.dir}/etc"/>
  <property name="lib.dir" value="lib"/>
  <property name="testlib.dir" value="testlib"/>
  <property name="doc.dir" value="doc"/>
  <property name="resource.location" location="resource"/>
  <property name="javadoc.dir" value="${doc.dir}/api"/>
  <property name="classes.dir" value="classes"/>
  <property name="testclasses.dir" value="testclasses"/>
  <property name="testclasses-jdk14.dir" value="testclasses-jdk14"/>
  <property name="build.dir" value="build"/>
  <property name="dist.name" value="${name}-${version}"/>
  <property name="embedded.dist.name" value="${name}-${version}-embedded"/>
  <property name="dist.base" value="distribution"/>
  <property name="dist.dir" value="dist"/>
  <property name="demo.dir" value="demo"/>
  <property name="webapp.dir" value="webapp"/>
  <property name="dist.src.file" value="${dist.dir}/${dist.name}-src.zip"/>
  <property name="dist.bin.file" value="${dist.dir}/${dist.name}.zip"/>
  <property name="dist.bin.derby.file" value="${dist.dir}/${dist.name}-derby.zip"/>
  <property name="dist.doc.file" value="${dist.dir}/doc.tar.gz"/>
  <property name="jar.file" value="${lib.dir}/${name}.jar"/>
  <property name="jar-jdk14.file" value="${lib.dir}/${name}-jdk14.jar" />
  <property name="workbench.jar.file" value="${lib.dir}/workbench.jar"/>
  <property name="workbench.dist.name" value="workbench-${version}"/>
  <property name="workbench.dist.file" value="${workbench.dist.name}.zip"/>
  <property name="resource.jar.file" value="${lib.dir}/eigenbase-resgen.jar"/>
  <property name="xom.jar.file" value="${lib.dir}/eigenbase-xom.jar"/>
  <property name="war.file" value="${lib.dir}/${name}.war"/>
  <property name="war.embeddedDb.file" value="${lib.dir}/${name}-embedded.war"/>
  <property name="jdk.home" value="${env.JAVA_HOME}"/>
  <property name="catalina.home" value="${env.CATALINA_HOME}"/>
  <property name="junit.home" value="${env.JUNIT_HOME}"/>
  <property name="mondrian.webapp.deploy" value="${env.JBOSS_HOME}/server/default/deploy"/>
  <property name="mondrian.retroweave" value="false"
      description="Tells mondrian to use retroweaver even if the JDK is later than 1.4"/>

  <property name="generated.java.files" value="
${java.dir}/mondrian/olap/Parser.java,
${java.dir}/mondrian/olap/ParserSym.java,
${java.dir}/mondrian/olap/MondrianDef.java,
${java.dir}/mondrian/gui/MondrianGuiDef.java,
${java.dir}/mondrian/resource/MondrianResource*.java,
${java.dir}/mondrian/xmla/DataSourcesConfig*.java,
${etc.dir}/mondrian/web/jsp/**/*.java"/>
  <property name="generated.lib.files" value="
${lib.dir}/mondrian.jar,
${lib.dir}/workbench.jar,
${jar-jdk14.file},
${lib.dir}/olap4j-jdk14.jar,
${lib.dir}/mondrian.war,
${lib.dir}/mondrian.xml,
${lib.dir}/mondrian-embedded.war,
${lib.dir}/web.xml,
${lib.dir}/index.jsp,
${lib.dir}/*.dtd,
VERSION.txt,
demo/FoodMartCreateData.sql,
demo/access/MondrianFoodMart.mdb"/>

  <path id="project.classpath">
    <pathelement location="${lib.dir}/servlet.jar"/>
    <pathelement location="${lib.dir}/jsp-api.jar"/>
    <pathelement location="${lib.dir}/commons-dbcp.jar"/>
    <pathelement location="${lib.dir}/commons-collections.jar"/>
    <pathelement location="${lib.dir}/commons-logging.jar"/>
    <pathelement location="${lib.dir}/commons-math-1.0.jar"/>
    <pathelement location="${lib.dir}/commons-pool.jar"/>
    <pathelement location="${lib.dir}/commons-vfs.jar"/>
    <pathelement location="${lib.dir}/eigenbase-properties.jar"/>
    <pathelement location="${lib.dir}/eigenbase-resgen.jar"/>
    <pathelement location="${lib.dir}/eigenbase-xom.jar"/>
    <pathelement location="${lib.dir}/javacup.jar"/>
    <pathelement location="${lib.dir}/log4j-1.2.9.jar"/>
    <pathelement location="${lib.dir}/olap4j.jar"/>
    <pathelement location="${lib.dir}/xalan.jar"/>
    <pathelement location="${lib.dir}/xml-apis.jar"/>
    <pathelement location="${lib.dir}/xercesImpl.jar"/>
    <!-- CLASSPATH must contain xml-apis.jar, xercesImpl.jar, javacup.jar -->
    <pathelement path="${env.CLASSPATH}"/>
    <pathelement location="${ant.home}/lib/ant.jar"/>
    <pathelement location="${ant.home}/lib/optional.jar"/>
  </path>

  <path id="project.build.classpath">
    <pathelement location="${classes.dir}"/>
    <path refid="project.classpath"/>
  </path>

  <path id="project.test.classpath-jdk15">
    <pathelement location="${classes.dir}"/>
    <path refid="project.classpath"/>
    <pathelement location="${testclasses.dir}"/>
    <fileset dir="${testlib.dir}">
      <include name="**/*.jar"/>
    </fileset>
    <pathelement location="${driver.classpath}"/>
  </path>

  <path id="project.test.classpath-jdk14">
    <pathelement location="${jar-jdk14.file}"/>
    <pathelement location="${lib.dir}/olap4j-jdk14.jar"/>
    <path refid="project.classpath"/>
    <pathelement location="${testclasses-jdk14.dir}"/>
    <fileset dir="${testlib.dir}">
      <include name="**/*.jar"/>
    </fileset>
    <pathelement location="${lib.dir}/retroweaver-rt-1.2.4.jar" />
    <pathelement location="${lib.dir}/backport-util-concurrent.jar" />
    <pathelement location="${driver.classpath}"/>
  </path>

  <condition property="jdk" id="jdk" value="jdk14">
    <or>
      <contains string="${java.version}" substring="1.4." />
      <equals arg1="${mondrian.retroweave}" arg2="true" />
    </or>
  </condition>

  <condition property="jdk" id="jdk" value="jdk15">
    <not>
      <or>
        <contains string="${java.version}" substring="1.4." />
        <equals arg1="${mondrian.retroweave}" arg2="true" />
      </or>
    </not>
  </condition>

  <condition property="jdk16.present">
    <equals arg1="${ant.java.version}" arg2="1.6"/>
  </condition>

  <condition property="jdk16.not.present">
    <not>
      <equals arg1="${ant.java.version}" arg2="1.6"/>
    </not>
  </condition>

  <path id="project.test.classpath" refid="project.test.classpath-${jdk}"/>

  <taskdef name="javacup" classname="java_cup.JavaCUPTask">
    <classpath refid="project.classpath"/>
  </taskdef>

  <taskdef name="xomgen" classname="org.eigenbase.xom.XOMGenTask">
    <classpath refid="project.classpath"/>
  </taskdef>

  <!--
    ===================================================================
    Properties for running the FoodMart test. (Override them by
    editing build.properties)
    ===================================================================
  -->

  <!-- Comma-separated list of jdbc drivers. Override in build.properties. -->
  <property name="mondrian.jdbcDrivers" value="sun.jdbc.odbc.JdbcOdbcDriver"/>

  <!-- Connect string to the database. Override in build.properties. -->
  <property name="mondrian.foodmart.jdbcURL" value="jdbc:odbc:MondrianFoodMart"/>

  <!-- Classpath for JDBC drivers. Override in your build.properties. -->
  <property name="driver.classpath" value=""/>

  <!-- URL of the catalog definition. -->
  <property name="mondrian.foodmart.catalogURL"
      value="file:${project.location}/${demo.dir}/FoodMart.xml"/>

  <!-- Test class name. -->
  <property name="mondrian.test.Class" value=""/>

  <!-- Test pattern. -->
  <property name="mondrian.test.Name" value=""/>

  <!-- Arguments to the java process spawned by the junit task. -->
  <property name="junit.jvmargs" value="-ea -esa -Xmx256m"/>

  <target name="help">
      <echo>
      You must specify a specific project target when using the ANT build.
      Targets are one of the following:
      - all
          Cleans, compiles all classes, and runs a simple test.
      - compile
          Compiles functional classes only.
      - clean
          Deletes build output.
      - test
          Runs a simple test.
      - info
          shows configuration info
      </echo>
  </target>

  <target name="info">
  <echo>==============================================================</echo>
  <echo>| Mondrian configuration info                                |</echo>
  <echo>==============================================================</echo>
  <echo>project.location      = ${project.location}</echo>
  <echo>jdk.home              = ${env.JAVA_HOME}</echo>
  <echo>catalina.home         = ${env.CATALINA_HOME}</echo>
  <echo>junit.home            = ${env.JUNIT_HOME}</echo>
  <echo>log4j.configuration   = ${log4j.configuration}</echo>
  <echo>mondrian.foodmart.catalogURL = ${mondrian.foodmart.catalogURL}</echo>
  <echo>mondrian.foodmart.jdbcURL    = ${mondrian.foodmart.jdbcURL}</echo>
  <echo>mondrian.jdbcDrivers         = ${mondrian.jdbcDrivers}</echo>
  <echo>==============================================================</echo>
  </target>

  <target name="clean">
    <delete includeEmptyDirs="true" quiet="true">
      <fileset dir="${classes.dir}" includes="**/*.class,**/*.properties"/>
      <fileset dir="${testclasses.dir}" includes="**/*.class,**/*.properties"/>
      <fileset dir="." includes="${generated.java.files},${generated.lib.files},VERSION.txt"/>
      <fileset dir="demo/derby/foodmart"/>
      <fileset dir="${javadoc.dir}" />
      <fileset dir="${build.dir}" />
      <fileset dir="${testclasses-jdk14.dir}" />
      <fileset dir="${testsrc.dir}" includes="**/*.log.xml"/>
      <fileset dir="${testsrc.dir}" includes="**/*JUnit.java"/>
    </delete>
  </target>

  <target name="clean-deep">
    <delete includeEmptyDirs="true" quiet="true">
      <fileset dir="${classes.dir}"/>
      <fileset dir="${testclasses.dir}"/>
    </delete>
    <antcall target="clean"/>
  </target>

  <target name="prepare">
    <mkdir dir="${classes.dir}"/>
    <mkdir dir="${testclasses.dir}"/>
    <mkdir dir="${build.dir}"/>
    <mkdir dir="${testlib.dir}"/>
  </target>

  <target name="cmdrunner" depends="compile">
    <property name="crtmp.dir" location="${build.dir}/tmpcmdrunner"/>
    <mkdir dir="${crtmp.dir}"/>

    <unjar src="${lib.dir}/commons-dbcp.jar" dest="${crtmp.dir}"/>
    <unjar src="${lib.dir}/commons-collections.jar" dest="${crtmp.dir}"/>
    <unjar src="${lib.dir}/commons-logging.jar" dest="${crtmp.dir}"/>
    <unjar src="${lib.dir}/commons-pool.jar" dest="${crtmp.dir}"/>
    <unjar src="${lib.dir}/commons-vfs.jar" dest="${crtmp.dir}"/>
    <unjar src="${lib.dir}/eigenbase-properties.jar" dest="${crtmp.dir}"/>
    <unjar src="${lib.dir}/eigenbase-resgen.jar" dest="${crtmp.dir}"/>
    <unjar src="${lib.dir}/eigenbase-xom.jar" dest="${crtmp.dir}"/>
    <unjar src="${lib.dir}/javacup.jar" dest="${crtmp.dir}"/>
    <unjar src="${lib.dir}/log4j-1.2.9.jar" dest="${crtmp.dir}"/>
    <unjar src="${lib.dir}/mondrian.jar" dest="${crtmp.dir}"/>
    <unjar src="${lib.dir}/servlet.jar" dest="${crtmp.dir}"/>

    <unjar dest="${crtmp.dir}">
        <fileset dir="${testlib.dir}">
            <include name="**/*.jar"/>
            <exclude name="**/junit.zip"/>
        </fileset>
    </unjar>

    <copy file="./log4j.properties" todir="${crtmp.dir}"/>

    <jar destfile="${lib.dir}/cmdrunner.jar" >
      <fileset dir="${crtmp.dir}" >
        <include name="**/*.xml"/>
        <include name="**/*.class"/>
        <include name="**/*.properties"/>
      </fileset>

      <manifest>
        <attribute name="Main-Class" value="mondrian.tui.CmdRunner"/>
        <attribute name="Built-By" value="${user.name}"/>
<!--
        <attribute name="Class-Path" value="${jar.classpath}"/>
        <section name="${jar.package}">
          <attribute name="Specification-Title" value="${component.title}"/>
          <attribute name="Specification-Version" value="${component.version}"/>
          <attribute name="Specification-Vendor" value="${company.name}"/>
          <attribute name="Implementation-Title" value="${component.title}"/>
          <attribute name="Implementation-Version" value="${component.build}"/>
          <attribute name="Implementation-Vendor" value="${company.name}"/>
        </section>
-->
      </manifest>
    </jar>

    <delete dir="${crtmp.dir}" quiet="true"/>
  </target>

    <target name="all" depends="
compile,
unzip-databases"/>

    <target name="unzip-databases" depends="
unzip-FoodMartCreateData,
unzip-FoodMartAccessDB,
unzip-FoodMartDerbyDB"/>

  <target name="compile" depends="
version,
prepare,
parser,
generate.resources,
def,
compile.java"/>

  <target name="generate.resources">
    <taskdef name="resgen" classname="org.eigenbase.resgen.ResourceGenTask">
      <classpath refid="project.build.classpath"/>
    </taskdef>

    <!-- Compile MondrianException first, so that resgen can use
         reflection on it. -->
    <javac
        srcdir="${java.dir}"
        destdir="${classes.dir}"
        debug="${project.build.debug}"
        classpathref="project.build.classpath"
        source="1.5">
      <include name="mondrian/olap/MondrianException.java" />
      <include name="mondrian/olap/ResultLimitExceededException.java" />
      <include name="mondrian/olap/InvalidHierarchyException.java" />
      <include name="mondrian/olap/ResourceLimitExceededException.java" />
      <include name="mondrian/olap/NativeEvaluationUnsupportedException.java" />
      <include name="mondrian/olap/QueryCanceledException.java" />
      <include name="mondrian/olap/QueryTimeoutException.java" />
    </javac>

    <resgen
        srcdir="${java.dir}"
        resdir="${classes.dir}"
        style="functor"
        locales="en_US,de_DE,de,es_ES">
      <include name="mondrian/resource/MondrianResource.xml"/>
    </resgen>

  </target>

  <condition property="jdk16.present">
    <equals arg1="${ant.java.version}" arg2="1.6"/>
  </condition>

  <condition property="jdk16.not.present">
    <not>
      <equals arg1="${ant.java.version}" arg2="1.6"/>
    </not>
  </condition>

  <target name="compile.java">
    <javac
        srcdir="${java.dir}"
        destdir="${classes.dir}"
        debug="${project.build.debug}"
        classpathref="project.build.classpath"
        source="1.5">
      <include name="mondrian/**/*.java"/>
      <exclude name="mondrian/olap4j/FactoryJdbc3Impl.java" if="jdk16.present"/>
      <exclude name="mondrian/olap4j/FactoryJdbc4Impl.java" if="jdk16.not.present"/>
    </javac>
    <copy file="src/main/mondrian/rolap/aggmatcher/DefaultRules.xml"
        todir="${classes.dir}"/>
    <copy file="src/main/mondrian/rolap/aggmatcher/DefaultRulesSchema.xml"
        todir="${classes.dir}"/>
    <copy todir="${classes.dir}">
      <fileset
          dir="${java.dir}"
          includes="
META-INF/**"/>
    </copy>
  </target>

  <target name="compile.tests" depends="info,compile.java">
    <javac
        srcdir="${javatest.dir}"
        destdir="${testclasses.dir}"
        debug="${project.build.debug}"
        classpathref="project.test.classpath"
        source="1.5">
        <include name="mondrian/**/*.java"/>
    </javac>
  </target>

  <target name="parser">
    <javacup
        srcdir="${java.dir}"
        input="${java.dir}/mondrian/olap/Parser.cup"
        expect="61"
        interface="true"/>
  </target>

  <target name="def">
    <xomgen
        model="${java.dir}/mondrian/olap/Mondrian.xml"
        destdir="${java.dir}"
        classname="mondrian.olap.MondrianDef"
        dtdname="mondrian.dtd"/>
    <copy file="${java.dir}/mondrian/olap/mondrian.dtd"
        todir="${lib.dir}"/>

    <!-- Workbench needs a different model. See Mondrian_SW.xml for details. -->
    <xomgen
        model="${java.dir}/mondrian/olap/Mondrian_SW.xml"
        destdir="${java.dir}"
        classname="mondrian.gui.MondrianGuiDef"
        dtdname="mondrian_SW.dtd"
        />

    <xomgen
        model="${java.dir}/mondrian/rolap/aggmatcher/DefaultRulesSchema.xml"
        destdir="${java.dir}"
        classname="mondrian.rolap.aggmatcher.DefaultDef"
        dtdname="aggregates.dtd"/>
    <copy file="${java.dir}/mondrian/rolap/aggmatcher/aggregates.dtd"
        todir="${lib.dir}"/>

    <xomgen
        model="${java.dir}/mondrian/xmla/DataSourcesConfig.xml"
        destdir="${java.dir}"
        classname="mondrian.xmla.DataSourcesConfig"
        dtdname="datasourcesconfig.dtd"/>
    <copy file="${java.dir}/mondrian/xmla/datasourcesconfig.dtd"
        todir="${lib.dir}"/>
  </target>

  <!-- Before you run it, you will need to set the
       "mondrian.jdbcDrivers", "mondrian.foodmart.jdbcURL", and
       "mondrian.foodmart.catalogURL" properties. The easiest way to
       do this is to edit the file "build.properties". -->

  <target name="set.connectString">
    <!-- Ensure that the JdbcUser parameter is only added to the connect string
         if the mondrian.foodmart.jdbcUser property is set. Likewise
         JdbcPassword. -->
    <condition property="jdbcUser"
        value=";JdbcUser='${mondrian.foodmart.jdbcUser}'">
      <isset property="mondrian.foodmart.jdbcUser"/>
    </condition>
    <condition property="jdbcUser" value="">
      <not>
        <isset property="mondrian.foodmart.jdbcUser"/>
      </not>
    </condition>
    <condition property="jdbcPassword"
        value=";JdbcPassword='${mondrian.foodmart.jdbcPassword}'">
      <isset property="mondrian.foodmart.jdbcPassword"/>
    </condition>
    <condition property="jdbcPassword" value="">
      <not>
        <isset property="mondrian.foodmart.jdbcPassword"/>
      </not>
    </condition>
    <property name="mondrian.test.connectString"
        value="Provider=mondrian;Jdbc='${mondrian.foodmart.jdbcURL}'${jdbcUser}${jdbcPassword};Catalog='${mondrian.foodmart.catalogURL}'"/>
  </target>

  <target name="FoodMartTest"
      description="Runs a few queries using the FoodMart schema."
      depends="set.connectString">
    <java classpathref="project.classpath" classname="mondrian.test.Main"
        fork="yes">

      <sysproperty key="mondrian.jdbcDrivers"
          value="${mondrian.jdbcDrivers}"/>
      <sysproperty key="mondrian.test.foodmart.catalogURL"
          value="${mondrian.foodmart.catalogURL}"/>

      <!-- mondrian.test.connectString is the mondrian connect-string.
           Provider must be 'mondrian'. -->
      <sysproperty key="mondrian.test.connectString"
          value="${mondrian.test.connectString}"/>

    </java>
  </target>

  <target name="test"
      description="Runs all JUnit tests."
      depends="compile,compile.tests,unzip-databases,set.connectString">
    <antcall target="test-nobuild"/>
    <antcall target="checkJavadoc"/>
  </target>


  <target name="test-list">
    <property name="test.args" value="-l"/>
    <antcall target="test-only"/>  
  </target>

  <target name="test-nobuild">
    <property name="test.args" value=""/>
    <antcall target="test-only"/>  
  </target>

  <target name="test-only"
      depends="set.connectString"
      description="
Runs all JUnit tests, using the given database connection
in {mondrian.foodmart.jdbcURL}.">
    <echo>Connecting to ${mondrian.foodmart.jdbcURL}</echo>
    <echo>Connect String: ${mondrian.test.connectString}</echo>
    <delete quiet="true">
      <fileset dir="${testsrc.dir}" includes="**/*.log.xml"/>
    </delete>
    <java
        classpathref="project.test.classpath"
        classname="mondrian.test.Main"
        fork="yes">
      <arg value="${test.args}"/>
      <jvmarg line="${junit.jvmargs}"/>
      <sysproperty key="log4j.configuration"
          value="${log4j.configuration}"/>
      <sysproperty key="mondrian.jdbcDrivers"
          value="${mondrian.jdbcDrivers}"/>
      <sysproperty key="mondrian.foodmart.jdbcURL"
          value="${mondrian.foodmart.jdbcURL}"/>
      <sysproperty key="mondrian.test.foodmart.catalogURL"
          value="${mondrian.foodmart.catalogURL}"/>
      <sysproperty key="mondrian.test.connectString"
          value="${mondrian.test.connectString}"/>
      <sysproperty key="mondrian.test.Class"
          value="${mondrian.test.Class}"/>
      <sysproperty key="mondrian.test.Name"
          value="${mondrian.test.Name}"/>
      <!-- tests require en_US locale -->
      <sysproperty key="user.language" value="en"/>
      <sysproperty key="user.region" value="US"/>

    </java>
  </target>

  <target name="junit-main" depends="compile,compile.tests,set.connectString">
    <mkdir dir="junit-results"/>
    <junit printsummary="yes" fork="yes" haltonfailure="no" haltonerror="no" errorproperty="juniterror" failureproperty="junitfailure">
        <classpath>
            <path refid="project.test.classpath"/>
        </classpath>

        <jvmarg line="${junit.jvmargs}"/>

        <sysproperty key="log4j.configuration"
            value="log4j.properties"/>
        <sysproperty key="mondrian.jdbcDrivers"
            value="${mondrian.jdbcDrivers}"/>
        <sysproperty key="mondrian.test.connectString"
            value="${mondrian.test.connectString}"/>
        <sysproperty key="mondrian.test.foodmart.catalogURL"
            value="${mondrian.foodmart.catalogURL}"/>

        <formatter type="xml" />

        <batchtest fork="yes" todir="junit-results">
            <fileset dir="${testclasses.dir}">
              <include name="mondrian/test/Main.class" />
            </fileset>
        </batchtest>
    </junit>

    <junitreport todir="junit-results">
      <fileset dir="junit-results">
        <include name="TEST-*.xml"/>
      </fileset>
      <report format="frames" todir="junit-results/html"/>
    </junitreport>
    <fail>
        <condition>
            <isset property="juniterror"/>
        </condition>
    </fail>
    <fail>
        <condition>
            <isset property="junitfailure"/>
        </condition>
    </fail>

  </target>

  <target name="junit-cachehit" depends="compile,compile.tests,set.connectString">
    <junit printsummary="yes" fork="yes" haltonfailure="no" haltonerror="no" errorproperty="juniterror" failureproperty="junitfailure" showoutput="yes">
        <classpath>
            <path refid="project.test.classpath"/>
        </classpath>
        <sysproperty key="log4j.configuration"
          value="${log4j.configuration}"/>
        <sysproperty key="mondrian.jdbcDrivers"
            value="${mondrian.jdbcDrivers}"/>
        <sysproperty key="mondrian.test.connectString"
            value="${mondrian.test.connectString}"/>
        <sysproperty key="mondrian.test.foodmart.catalogURL"
            value="${mondrian.foodmart.catalogURL}"/>
        <formatter type="xml" />
        <batchtest fork="yes">
            <fileset dir="${testclasses.dir}">
              <include name="mondrian/test/CacheHitTest.class" />
            </fileset>
        </batchtest>
    </junit>
    <fail>
        <condition>
            <isset property="juniterror"/>
        </condition>
    </fail>
    <fail>
        <condition>
            <isset property="junitfailure"/>
        </condition>
    </fail>
  </target>

  <target name="junit-cvconcurrent" depends="compile,compile.tests,set.connectString">
    <junit printsummary="yes" fork="yes" haltonfailure="no" haltonerror="no" errorproperty="juniterror" failureproperty="junitfailure" showoutput="yes">
        <classpath>
            <path refid="project.test.classpath"/>
        </classpath>
        <sysproperty key="log4j.configuration"
          value="${log4j.configuration}"/>
        <sysproperty key="mondrian.jdbcDrivers"
            value="${mondrian.jdbcDrivers}"/>
        <sysproperty key="mondrian.test.connectString"
            value="${mondrian.test.connectString}"/>
        <sysproperty key="mondrian.test.foodmart.catalogURL"
            value="${mondrian.foodmart.catalogURL}"/>
        <formatter type="xml" />
        <batchtest fork="yes">
            <fileset dir="${testclasses.dir}">
              <include name="mondrian/test/CVConcurrentMdxTest.class" />
            </fileset>
        </batchtest>
    </junit>
    <fail>
        <condition>
            <isset property="juniterror"/>
        </condition>
    </fail>
    <fail>
        <condition>
            <isset property="junitfailure"/>
        </condition>
    </fail>
  </target>

  <macrodef name="genJUnit">
    <attribute name="path"/>
    <attribute name="packagename"/>
    <attribute name="testname"/>
    <sequential>
      <xslt style="${testsrc.dir}/xsl/generateDiffRepositoryJUnit.xsl"
        in="@{path}@{testname}.ref.xml"
        out="@{path}@{testname}JUnit.java">
        <param name="reffile"
          expression="${testsrc.dir}/main/mondrian/test/clearview/@{testname}.ref.xml"/>
        <param name="packagename"
          expression="@{packagename}"/>
        <param name="classname"
          expression="@{testname}JUnit"/>
      </xslt>
    </sequential>
  </macrodef>

  <target name="generateDiffRepositoryJUnit"
    description="Generates explicit Java testcases from .ref.xml files">

    <!-- generate clearview junit code files -->
    <property name="path" value="${testsrc.dir}/main/mondrian/test/clearview/"/>
    <genJUnit path="${path}" packagename="mondrian.test.clearview" testname="CVBasicTest"/>
    <genJUnit path="${path}" packagename="mondrian.test.clearview" testname="MetricFilterTest"/>
    <genJUnit path="${path}" packagename="mondrian.test.clearview" testname="MiscTest"/>
    <genJUnit path="${path}" packagename="mondrian.test.clearview" testname="PredicateFilterTest"/>
    <genJUnit path="${path}" packagename="mondrian.test.clearview" testname="SummaryTest"/>
    <genJUnit path="${path}" packagename="mondrian.test.clearview" testname="SummaryMetricPercentTest"/>
    <genJUnit path="${path}" packagename="mondrian.test.clearview" testname="TopBottomTest"/>
    <genJUnit path="${path}" packagename="mondrian.test.clearview" testname="GrandTotalTest"/>
    <genJUnit path="${path}" packagename="mondrian.test.clearview" testname="SubTotalTest"/>
    <genJUnit path="${path}" packagename="mondrian.test.clearview" testname="BatchedFillTest"/>
  </target>

  <target name="etags">
    <exec dir="${project.location}" executable="find" output="javaFiles">
      <arg line=". -name &quot;*.java&quot; -print"/>
    </exec>
    <exec dir="${project.location}" executable="ctags">
      <arg line="-e"/>
      <arg line="-L javaFiles"/>
    </exec>
    <delete file="${project.location}/javaFiles" quiet="true"/>
  </target>

  <target name="version">
    <echo file="VERSION.txt">Title: ${name}
Version: ${version}
Vendor: ${vendor}
</echo>
  </target>

  <target name="srczip" depends="version">
    <mkdir dir="${dist.dir}" />
    <delete file="${dist.src.file}"/>
    <zip
        zipfile="${dist.src.file}"
        update="true">
      <zipfileset
          dir="."
          prefix="${dist.name}"
          includes="
${java.dir}/**/*.properties,
${java.dir}/META-INF/**,
${java.dir}/mondrian/resource/MondrianResource.xml,
${java.dir}/mondrian/olap/Mondrian.xml,
${java.dir}/mondrian/olap/Mondrian_SW.xml,
${java.dir}/mondrian/rolap/aggmatcher/DefaultRules.xml,
${java.dir}/mondrian/rolap/aggmatcher/DefaultRulesSchema.xml,
${java.dir}/mondrian/xmla/DataSourcesConfig.xml,
${java.dir}/**/*.java,
${java.dir}/**/*.cup,
${java.dir}/**/*.gif,
${java.dir}/**/*.html,
${lib.dir}/commons-collections.jar,
${lib.dir}/commons-dbcp.jar,
${lib.dir}/commons-logging.jar,
${lib.dir}/commons-math-1.0.jar,
${lib.dir}/commons-pool.jar,
${lib.dir}/commons-vfs.jar,
${lib.dir}/eigenbase-properties.jar,
${lib.dir}/eigenbase-resgen.jar,
${lib.dir}/eigenbase-xom.jar,
${lib.dir}/javacup.jar,
${lib.dir}/log4j-1.2.9.jar,
${lib.dir}/mondrian.xsd,
${lib.dir}/jsp-api.jar,
${lib.dir}/eigenbase-resgen.jar,
${lib.dir}/eigenbase-xom.jar,
${lib.dir}/servlet.jar,
${lib.dir}/xalan.jar,
${lib.dir}/xercesImpl.jar,
${testsrc.dir}/queryFiles/**/*.xml,
${testsrc.dir}/**/*.csv,
${testsrc.dir}/**/*.error,
${testsrc.dir}/**/*.java,
${testsrc.dir}/**/*.xml,
${testsrc.dir}/**/*.html,
${testsrc.dir}/**/*.txt,
${testlib.dir}/junit.jar,
${testlib.dir}/xmlunit*.jar,
${webapp.dir}/WEB-INF/*.xml,
${webapp.dir}/**/*.jsp,
${webapp.dir}/WEB-INF/*.xsl,
${webapp.dir}/WEB-INF/*.tld,
${doc.dir}/**/*.css,
${doc.dir}/**/*.gif,
${doc.dir}/**/*.jpeg,
${doc.dir}/**/*.html,
misc/**/*.mf,
misc/Meta.xsl,
build.xml,
build.bat,
build.sh,
build.properties,
mondrian.properties,
LICENSE.html,
README.txt,
VERSION.txt,
${demo.dir}/FoodMart.xml"
          excludes="
${javadoc.dir}/**,
**/_vti*/*,
**/*~,
**/junit-results/**,
${generated.java.files},
doc/deployDoc.sh" />
      <zipfileset
          dir="."
          prefix="${dist.name}"
          filemode="755"
          includes="
buildJdk16.bat,
buildJdk16.sh" />
    </zip>
  </target>

  <target name="check-FoodMartCreateData-uptodate">
    <condition property="FoodMartCreateData.uptodate">
      <or>
        <not>
          <available file="demo/FoodMartCreateData.zip"/>
        </not>
        <uptodate
            srcfile="demo/FoodMartCreateData.zip"
            targetfile="demo/FoodMartCreateData.sql"/>
      </or>
    </condition>
  </target>

  <target name="unzip-FoodMartCreateData"
      depends="check-FoodMartCreateData-uptodate"
      unless="FoodMartCreateData.uptodate">
    <unzip src="demo/FoodMartCreateData.zip" dest="demo">
      <patternset includes="FoodMartCreateData.sql"/>
    </unzip>
    <touch file="demo/FoodMartCreateData.sql"/>
  </target>

  <target name="check-FoodMartAccessDB-uptodate">
    <condition property="FoodMartAccessDB.uptodate">
      <or>
        <not>
          <available file="demo/access/MondrianFoodMart-Access.zip"/>
        </not>
        <uptodate
            srcfile="demo/access/MondrianFoodMart-Access.zip"
            targetfile="demo/access/MondrianFoodMart.mdb"/>
      </or>
    </condition>
  </target>

  <target name="unzip-FoodMartAccessDB"
      depends="check-FoodMartAccessDB-uptodate"
      unless="FoodMartAccessDB.uptodate">
    <unzip src="demo/access/MondrianFoodMart-Access.zip" dest="demo/access">
      <patternset includes="MondrianFoodMart.mdb"/>
    </unzip>
    <touch file="demo/access/MondrianFoodMart.mdb"/>
  </target>

  <target name="check-FoodMartDerbyDB-uptodate">
    <condition property="FoodMartDerbyDB.uptodate">
      <or>
        <not>
          <available file="demo/derby/derby-foodmart.zip"/>
        </not>
        <uptodate
            srcfile="demo/derby/derby-foodmart.zip"
            targetfile="demo/derby/foodmart/service.properties"/>
      </or>
    </condition>
  </target>

  <target name="unzip-FoodMartDerbyDB"
      depends="check-FoodMartDerbyDB-uptodate"
      unless="FoodMartDerbyDB.uptodate">
    <unzip src="demo/derby/derby-foodmart.zip" dest="demo/derby">
      <patternset includes="**/*.*"/>
    </unzip>
    <touch file="demo/derby/foodmart/service.properties"/>
  </target>

  <target name="release" depends="clean-deep, binzip, binDerbyzip"/>

  <target name="upload">
    <ftp server="upload.sourceforge.net"
        userid="anonymous"
        password="${user.name}@users.sourceforge.net"
        remotedir="incoming"
        verbose="yes">
      <fileset dir=".">
        <include name="${dist.bin.file}"/>
        <include name="${dist.bin.derby.file}"/>
      </fileset>
    </ftp>
  </target>

  <target name="binzip"
      depends="version,war,srczip,javadoc,xml_schema,retroweave,unzip-FoodMartCreateData,unzip-FoodMartAccessDB">
    <mkdir dir="${dist.dir}" />
    <delete file="${dist.bin.file}"/>
    <zip zipfile="${dist.bin.file}">
      <zipfileset
          dir="."
          prefix="${dist.name}"
          includes="
${doc.dir}/**/*.jpg,
${doc.dir}/**/*.html,
${doc.dir}/**/*.css,
${doc.dir}/**/*.png,
${doc.dir}/api/**/*.xml,
${war.file},
${jar.file},
${jar-jdk14.file},
${lib.dir}/olap4j-jdk14.jar,
${lib.dir}/retroweaver-rt-1.2.4.jar,
lib/*.dtd,
demo/FoodMart.xml,
demo/FoodMartCreateData.sql,
demo/access/MondrianFoodMart.mdb,
LICENSE.html,
README.txt,
VERSION.txt"
          excludes="
**/*~,
**/_vti*/*,
**/*.psp,
${doc.dir}/api/src-html/**/*"/>
      <zipfileset
          dir="${dist.dir}"
          prefix="${dist.name}"
          includes="${dist.name}-src.zip"/>
    </zip>
  </target>

  <target name="binDerbyzip"
      depends="version,derby-war,srczip,javadoc,xml_schema,unzip-FoodMartDerbyDB">
    <mkdir dir="${dist.dir}" />
    <delete file="${dist.bin.derby.file}"/>
    <zip zipfile="${dist.bin.derby.file}">
      <zipfileset
          dir="."
          prefix="${embedded.dist.name}"
          includes="
${doc.dir}/**/*.jpg,
${doc.dir}/**/*.html,
${doc.dir}/**/*.css,
${doc.dir}/**/*.png,
${doc.dir}/api/**/*.xml,
${war.embeddedDb.file},
${jar.file},
${jar-jdk14.file},
${lib.dir}/olap4j-jdk14.jar,
${lib.dir}/retroweaver-rt-1.2.4.jar,
lib/*.dtd,
demo/FoodMart.xml,
LICENSE.html,
README.txt,
VERSION.txt"
          excludes="
**/*~,
**/_vti*/*,
**/*.psp,
${doc.dir}/api/src-html/**/*"/>
      <zipfileset
          dir="${dist.dir}"
          prefix="${embedded.dist.name}"
          includes="${dist.name}-src.zip"/>
    </zip>
  </target>

  <target name="doczip"
      depends="javadoc-with-ydoc, xml_schema"
      description="Builds a zipfile of the documentation, which can then be
                   deployed to sf.net. See also doc/deployDoc.sh.">
    <mkdir dir="${dist.dir}" />
    <tar
        destfile="${dist.doc.file}"
        compression="gzip">
      <tarfileset
          dir="."
          includes="
doc/api/**/*,
doc/**/*.html,
doc/**/*.gif,
doc/**/*.jpg,
doc/**/*.png,
doc/**/*.css,
doc/**/*.xml"
          excludes="
**/*~,
**/_vti*/*,
**/*.psp,
**/*.sh"/>
    </tar>
  </target>

  <target name="checkIsNotJdk16" if="jdk16.present">
    <fail message="The 'jar' target (and dependent targets 'release', 'binzip')
must be run under JDK 1.5." />
  </target>

  <target name="compileJdk16">
    <exec osfamily="unix" executable="buildJdk16.sh"/>
    <exec osfamily="windows" executable="buildJdk16.bat"/>
  </target>

  <target name="jar" depends="version,checkIsNotJdk16,compile,compile.tests,compileJdk16">
    <mkdir dir="${lib.dir}" />
    <jar
        destfile="${jar.file}"
        update="true">
      <zipfileset
          dir="${classes.dir}"
          includes="
**/*.class,
**/*.properties,
**/*.xml,
META-INF/**"
          excludes="mondrian/gui/**/*.*"/>
      <zipfileset
          dir="${testclasses.dir}"
          includes="
mondrian/test/loader/**/*.class"/>
      <zipfileset
          dir="${javatest.dir}"
          includes="
mondrian/test/loader/insert.sql"/>
      <zipfileset
          dir="."
          includes="
LICENSE.html,
README.txt,
VERSION.txt"/>
      <manifest>
        <attribute name="Built-By" value="${user.name}"/>
        <section name="mondrian.olap">
          <attribute name="Implementation-Title" value="${name}"/>
          <attribute name="Implementation-Version" value="${version}"/>
          <attribute name="Implementation-Vendor" value="${vendor}"/>
        </section>
      </manifest>
    </jar>
  </target>

  <target name="xml_schema"
      description="Generates xml_schema.html from Mondrian.xml">
    <xslt in="src/main/mondrian/olap/Mondrian.xml"
        out="doc/xml_schema.html"
        style="misc/Meta.xsl"/>
  </target>

  <target name="javadoc-strict" description="
Generates javadoc as part of the nightly regress,
to make sure that all javadoc references are valid.

Javadoc is known to produce errors against JDK 1.4 and 1.5; it runs
clean against JDK 1.6.">
    <antcall target="javadoc-internal">
      <param name="additionalparam" value=""/>
      <param name="access" value="private"/>
    </antcall>
  </target>

  <target name="javadoc" description="Generates javadoc for release">
    <antcall target="javadoc-internal">
      <param name="additionalparam" value=""/>
      <param name="access" value="package"/>
    </antcall>
  </target>

  <target name="javadoc-internal">
    <mkdir dir="${javadoc.dir}" />
    <delete quiet="true" file="${javadoc.dir}/index.html"/>
    <!-- remove stray package.html files under classes to avoid 'multiple
         sources of package comments' errors -->
    <delete includeEmptyDirs="false" quiet="true">
      <fileset dir="${classes.dir}" includes="**/package.html"/>
      <fileset dir="${testclasses.dir}" includes="**/package.html"/>
    </delete>
    <javadoc sourcepath="${java.dir}:${javatest.dir}"
        maxmemory="1024m"
        classpathref="project.test.classpath"
        destdir="${javadoc.dir}"
        packagenames="mondrian.*"
        overview="${java.dir}/overview.html"
        footer="&lt;a href=&quot;http://sourceforge.net/projects/mondrian&quot;&gt;&lt;img src=&quot;http://sourceforge.net/sflogo.php?group_id=35302&#38;type=1&quot; width=&quot;88&quot; height=&quot;31&quot; border=&quot;0&quot; alt=&quot;SourceForge.net_Logo&quot;&gt;&lt;/a&gt;"
        author="true"
        source="1.5"
        access="${access}"
        Windowtitle="Mondrian OLAP Server, version ${version}"
        additionalparam="${additionalparam}"
      >
      <tag name="pre" description="Pre-condition:"
           scope="constructors,methods"/>
      <tag name="post" description="Post-condition:"
           scope="constructors,methods"/>
      <tag name="testcase" description="Test-case:"
           scope="constructors,methods,types"/>
      <link href="http://java.sun.com/javase/6/docs/api/"/>
      <link href="http://www.olap4j.org/api/"/>
      <link href="http://junit.sourceforge.net/javadoc"/>
      <link href="http://java.sun.com/products/servlet/2.2/javadoc/"/>
      <link href="http://eigenbase.sourceforge.net/resgen/api/"/>
      <link href="http://farrago.sourceforge.net/api/"/>
    </javadoc>
    <copy file="${java.dir}/mondrian/olap/Mondrian.xml"
        todir="${javadoc.dir}/mondrian/olap"/>
  </target>

  <!-- Generate javadoc with embedded UML diagrams using the yDoc doclet from
       yWorks.com. Set ydoc.home in build.properties, then replace
       ${ydoc.home}/resources/ydoc.license with a full license (free for open
       source use). -->
  <target name="javadoc-with-ydoc"
      description="Generates javadoc for public site; verbose: includes
diagrams and hyperlinks to source code">
    <mkdir dir="${javadoc.dir}" />
    <delete quiet="true" file="${javadoc.dir}/index.html"/>
    <!-- remove stray package.html files under classes to avoid 'multiple
         sources of package comments' errors -->
    <delete includeEmptyDirs="false" quiet="true">
      <fileset dir="${classes.dir}" includes="**/package.html"/>
      <fileset dir="${testclasses.dir}" includes="**/package.html"/>
    </delete>
    <property name="ps" value="${path.separator}"/>
    <javadoc sourcepath="${java.dir}"
        maxmemory="1024m"
        classpathref="project.test.classpath"
        destdir="${javadoc.dir}"
        packagenames="mondrian.*"
        overview="${java.dir}/overview.html"
        footer="&lt;a href=&quot;http://sourceforge.net/projects/mondrian&quot;&gt;&lt;img src=&quot;http://sourceforge.net/sflogo.php?group_id=35302&#38;type=1&quot; width=&quot;88&quot; height=&quot;31&quot; border=&quot;0&quot; alt=&quot;SourceForge.net_Logo&quot;&gt;&lt;/a&gt;"
        author="true"
        source="1.5"
        access="package"
        Windowtitle="Mondrian OLAP Server, version ${version}"
        additionalparam="-linksource"
      >
      <tag name="pre" description="Pre-condition:"
           scope="constructors,methods"/>
      <tag name="post" description="Post-condition:"
           scope="constructors,methods"/>
      <tag name="testcase" description="Test-case:"
           scope="constructors,methods,types"/>
      <link href="http://java.sun.com/javase/6/docs/api/"/>
      <link href="http://www.olap4j.org/api/"/>
      <link href="http://junit.sourceforge.net/javadoc"/>
      <link href="http://java.sun.com/products/servlet/2.2/javadoc/"/>
      <link href="http://eigenbase.sourceforge.net/resgen/api/"/>
      <link href="http://farrago.sourceforge.net/api/"/>
      <doclet
          name="ydoc.doclets.YStandard"
          path="${ydoc.home}/lib/ydoc.jar${ps}${ydoc.home}/lib/class2svg.jar${ps}${ydoc.home}/resources${ps}${ydoc.home}/doc">
        <param name="-author"/>
        <param name="-generic"/>
        <param name="-umlautogen"/>
        <param name="-tag" value="y.precondition"/>
        <param name="-tag" value="y.postcondition"/>
        <param name="-tag" value="y.complexity"/>
        <param name="-tag" value="param"/>
        <param name="-tag" value="return"/>
        <param name="-tag" value="see"/>
        <param name="-tag" value="y.uml"/>
      </doclet>
    </javadoc>
    <copy file="${java.dir}/mondrian/olap/Mondrian.xml"
        todir="${javadoc.dir}/mondrian/olap"/>
  </target>

  <!-- Ensure that javadoc has no warnings/errors. -->
  <target name="checkJavadoc">
    <record name="javadoc-complaints.log" action="start"
      emacsmode="true" loglevel="warn"/>
    <antcall target="javadoc-strict"/>
    <record name="javadoc-complaints.log" action="stop"/>
    <loadfile srcFile="javadoc-complaints.log" property="javadoc.complaints">
      <filterchain>
        <filterreader classname="org.apache.tools.ant.filters.LineContains">
          <param type="negate" value="true"/>
          <param type="contains" value="Error fetching URL"/>
        </filterreader>
        <striplinebreaks />
      </filterchain>
    </loadfile>
    <fail if="javadoc.complaints"
        message="Javadoc reported warnings or errors; see javadoc-complaints.log for details"/>
    <delete file="javadoc-complaints.log"/>
    <!-- Save disk space since we're just checking. -->
    <antcall target="cleanJavadoc"/>
  </target>

  <target name="cleanJavadoc">
    <delete includeEmptyDirs="true" quiet="true">
      <fileset dir="${javadoc.dir}" includes="**/*"/>
    </delete>
  </target>

  <target name="copy-jars">
    <copy todir="${lib.dir}">
      <fileset dir="${ant.home}/lib" includes="ant.jar,optional.jar"/>
      <fileset dir="${catalina.home}/common/lib" includes="jsp-api.jar"/>
    </copy>
    <copy todir="${lib.dir}">
      <fileset dir="${catalina.home}/common/lib" includes="servlet*.jar"/>
      <mapper type="merge" to="servlet.jar"/>
    </copy>
    <copy todir="${lib.dir}">
      <fileset dir="${catalina.home}/common/lib" includes="commons-*.jar" excludes="commons-el*.jar"/>
      <mapper type="regexp" from="(^.+)-([.0-9]+\.jar$)" to="\1.jar" /> <!-- strip version -->
    </copy>
    <copy todir="${testlib.dir}">
      <fileset dir="${junit.home}" includes="junit.jar"/>
    </copy>
  </target>

  <target name="war" depends="jar,compile.tests" description="
Creates mondrian.war based upon jpivot.war.
Assumes that mondrian.jar exists (use 'jar' target)">

    <!-- The Ant war task was doing funny things with update="yes" so piece the mondrian.war
         together from the jpivot.war and Mondrian specific settings -->

    <filter filtersfile="mondrian.properties"/>
    <delete dir="${build.dir}/mondrian" />
    <mkdir dir="${build.dir}/mondrian" />
    <delete file="${war.file}"/>
    <unzip src="${lib.dir}/jpivot.war" dest="${build.dir}/mondrian"/>

    <!-- Remove the jpivot stuff we intend to overwrite. -->
    <delete>
      <fileset dir="${build.dir}/mondrian" includes="index.jsp,xmla.jsp"/>
      <fileset dir="${build.dir}/mondrian/WEB-INF" includes="web.xml,datasources.xml,mondrian.properties"/>
      <fileset dir="${build.dir}/mondrian/WEB-INF/queries" includes="xmla.jsp,*.xml"/>
      <fileset dir="${build.dir}/mondrian/WEB-INF/lib" includes="${name}.jar,eigenbase-*.jar,*.xml,mondrian.dtd"/>
    </delete>

    <mkdir dir="${lib.dir}" />

    <!-- Build the WEB-INF directory. -->
    <copy file="${webapp.dir}/WEB-INF/web-jpivot.xml"
        tofile="${build.dir}/mondrian/WEB-INF/web.xml" />
    <copy todir="${build.dir}/mondrian/WEB-INF">
      <fileset
          dir="${webapp.dir}/WEB-INF"
          includes="mondrian.properties,datasources.xml,*.xsl,*.tld,**/*.jsp"/>
    </copy>

    <!-- our FoodMart.xml may be newer than jpivot's -->
    <copy
        file="${demo.dir}/FoodMart.xml"
        todir="${build.dir}/mondrian/WEB-INF/queries" />

    <war warfile="${war.file}"
        webxml="${build.dir}/mondrian/WEB-INF/web.xml">
      <webinf dir="${build.dir}/mondrian/WEB-INF" excludes="web.xml"/>
      <fileset dir="${build.dir}/mondrian" excludes="WEB-INF/**/*,*.jsp"/>
      <fileset dir="${webapp.dir}" includes="*.*"/>
      <lib dir="${lib.dir}" includes="${name}.jar,olap4j.jar,eigenbase-*.jar,xalan.jar,*.dtd"/>
      <lib dir="${testlib.dir}" includes="xmlunit*.jar"/>
      <classes dir="${javatest.dir}" includes="mondrian/xmla/**/*.xml"/>
      <classes dir="${testclasses.dir}" includes="mondrian/xmla/test/**/*.*"/>
      <classes dir="${testclasses.dir}" includes="mondrian/test/TestContext.*"/>
      <classes dir="${testclasses.dir}" includes="mondrian/test/DiffRepository.*"/>
    </war>
  </target>

  <target name="deploy-war" depends="war" description="Deploy WAR with JPivot to web server">
    <copy file="${war.file}" todir="${mondrian.webapp.deploy}"/>
  </target>

  <target name="derby-war" depends="jar,compile.tests,unzip-FoodMartDerbyDB" description="
Creates mondrian-embedded.war based upon jpivot.war for Derby with embedded database.">
    <filter filtersfile="mondrian.properties"/>
    <delete dir="${build.dir}/mondrian-embedded" />
    <mkdir dir="${build.dir}/mondrian-embedded" />
    <delete file="${war.embeddedDb.file}"/>
    <unzip src="${lib.dir}/jpivot.war" dest="${build.dir}/mondrian-embedded"/>

    <!-- Remove the jpivot stuff we intend to overwrite. -->
    <delete>
      <fileset dir="${build.dir}/mondrian-embedded" includes="index.jsp,xmla.jsp"/>
      <fileset dir="${build.dir}/mondrian-embedded/WEB-INF" includes="datasources.xml,mondrian.properties"/>
      <fileset dir="${build.dir}/mondrian-embedded/WEB-INF/queries" includes="*.jsp,*.xml"/>
      <fileset dir="${build.dir}/mondrian-embedded/WEB-INF/lib" includes="${name}.jar,eigenbase-*.jar,*.xml"/>
    </delete>

    <mkdir dir="${lib.dir}" />

    <!-- Build the WEB-INF directory. -->
    <copy file="${webapp.dir}/WEB-INF/web-jpivot.xml"
        filtering="true"
        tofile="${build.dir}/mondrian-embedded/WEB-INF/web.xml" />
    <copy todir="${build.dir}/mondrian-embedded/WEB-INF">
      <fileset
          dir="${webapp.dir}/WEB-INF"
          includes="mondrian.properties,datasources.xml,*.xsl,*.tld,**/*.jsp"/>
    </copy>

    <!-- our FoodMart.xml may be newer than jpivot's -->
    <copy
        file="${demo.dir}/FoodMart.xml"
        todir="${build.dir}/mondrian-embedded/WEB-INF/queries" />

    <copy
        todir="${build.dir}/mondrian-embedded/WEB-INF">
      <fileset
          dir="${demo.dir}/derby"
          includes="queries/*.jsp,datasources.xml,mondrian.properties"/>
    </copy>

    <war warfile="${war.embeddedDb.file}"
        webxml="${demo.dir}/derby/web.xml">
      <webinf dir="${build.dir}/mondrian-embedded/WEB-INF" excludes="web.xml"/>

      <fileset dir="${build.dir}/mondrian-embedded" excludes="busy.jsp,WEB-INF/**/*"/>
      <fileset dir="${webapp.dir}" excludes="index.jsp,testpage.jsp,WEB-INF/**/*"/>
      <lib dir="${lib.dir}" includes="${name}.jar,eigenbase-*.jar,xalan.jar,*.dtd"/>
      <!-- <lib dir="${lib.dir}" includes="commons-math-1.0.jar"/>  -->
      <lib dir="${testlib.dir}" includes="xmlunit*.jar,derby.jar"/>
      <classes dir="${demo.dir}/derby" includes="foodmart/**/*.*"/>
      <classes dir="${javatest.dir}" includes="mondrian/xmla/**/*.xml"/>
      <classes dir="${testclasses.dir}" includes="mondrian/xmla/test/**/*.*"/>
      <classes dir="${testclasses.dir}" includes="mondrian/test/TestContext.*"/>
    </war>
  </target>

  <target name="deploy-derby-war" depends="derby-war" description="Deploy WAR with JPivot to web server">
    <mkdir dir="${mondrian.webapp.deploy}/${name}-embedded" />
    <unzip src="${war.embeddedDb.file}" dest="${mondrian.webapp.deploy}/${name}-embedded" overwrite="true"/>
  </target>

  <target name="war-no-jpivot" depends="jar" description="
Creates mondrian.war.
Assumes that mondrian.jar exists (use 'jar' target),
and lib contains ant.jar, junit.jar etc. (use 'copy-jars' target)">
    <filter filtersfile="mondrian.properties"/>
    <mkdir dir="${lib.dir}" />
    <delete file="${war.file}"/>
    <delete file="${lib.dir}/web.xml"/>
    <copy file="${webapp.dir}/WEB-INF/web.xml"
        filtering="true" todir="${lib.dir}"/>
    <war warfile="${war.file}"
        webxml="${lib.dir}/web.xml">
      <webinf dir="${webapp.dir}/WEB-INF" excludes="web.xml"/>
      <webinf dir="${demo.dir}" includes="FoodMart.xml"/>
      <fileset dir="${webapp.dir}" excludes="WEB-INF/**/*"/>
      <lib dir="${lib.dir}" includes="
${name}.jar,
javacup.jar,
xalan.jar"/>
    </war>
  </target>

  <target name="deploy-no-jpivot-war" depends="war-no-jpivot" description="Deploy standalone WAR to web server">
    <delete>
      <fileset dir="${mondrian.webapp.deploy}" includes="${war.file}"/>
    </delete>
    <copy file="${war.file}" todir="${mondrian.webapp.deploy}"/>
  </target>

  <target name="workbench" depends="jar">
    <jar jarfile="${workbench.jar.file}" manifest="misc/workbench-manifest.mf" update="true">
      <fileset
          dir="${classes.dir}"
          includes="mondrian/gui/**/*.class"/>
      <fileset
          dir="${java.dir}"
          includes="mondrian/gui/**/*.gif,mondrian/gui/**/*.properties,mondrian/gui/**/*.html"/>
    </jar>
  </target>

  <target name="workbench-run" >
    <!-- check if mondrian.jar and workbench jar file exists -->
    <available file="${jar.file}" property="mondrian.jar.exists"/>
    <available file="${workbench.jar.file}" property="workbench.jar.exists"/>
    <java  jar="${workbench.jar.file}"  fork="yes"/>
  </target>

  <target name="workbench-dist" 
      depends="version,workbench">
    <mkdir dir="${dist.dir}" />
    <delete file="${dist.dir}/${workbench.dist.file}"/>
    <zip zipfile="${dist.dir}/${workbench.dist.file}">
      <zipfileset
          dir="."
          prefix="${workbench.dist.name}"
          includes="
${doc.dir}/**/*.pdf,
lib/mondrian.jar,
lib/workbench.jar,
lib/x*.jar,
lib/eigenbase*.jar,
lib/commons*.jar,
lib/javacup.jar,
lib/jlfgr-*.jar,
lib/*.dtd,
lib/*.xsd,
demo/FoodMart.xml,
LICENSE.html"
          excludes="
**/*~,
**/_vti*/*,
**/*.psp,
${doc.dir}/api/src-html/**/*"/>
      <zipfileset
          dir="workbench"
          prefix="${workbench.dist.name}"
          includes="**/*"/>
      <zipfileset
          dir="src/main"
          prefix="${workbench.dist.name}/src"
          includes="mondrian/gui/**/*"/>
    </zip>
  </target>

  <!--
       Retroweaver re-engineers JDK 1.5-compatible code so it can run under
       JDK 1.4. This task compiles all core and test classes under 1.5 then
       runs retroweaver to make them 1.4 compatible.

       If you only intend to run on JDK 1.5, there's no need to call this task.

       The inputs to this process are the mondrian.jar file (containing core
       files) and the testclasses directory (containing test classes).

       The outputs from this process are the mondrian-jdk14.jar file
       and the testclasses-jdk14 directory.

       Note that, to keep things sane, this task does not modify classes in
       place.

       After you've run this task, you can invoke 'ant test' from a JDK 1.4
       and all the tests will run. You should also be able replace mondrian.jar
       with mondrian-jdk14.jar and retroweaver-rt-1.2.4.jar (retroweaver's
       runtime library) in your web application and run jpivot, but I haven't
       tried that. Exercise for the reader.

       Choosing the right ant version is a bit tricky. The retroweaver task
       requires ant-1.6.5 or higher (and JDK 1.5), but when you run the
       regression under JDK 1.4, you must use ant-1.6.0. Later versions of
       ant include junit4, which requires JDK 1.5.
    -->
  <target name="retroweave" depends="jar, compile.tests">
    <taskdef name="retroweaver"
        classname="com.rc.retroweaver.ant.RetroWeaverTask">
      <classpath>
        <pathelement location="${lib.dir}/asm-2.2.3.jar" />
        <pathelement location="${lib.dir}/asm-commons-2.2.3.jar" />
        <pathelement location="${lib.dir}/retroweaver-1.2.4.jar" />
        <pathelement location="${lib.dir}/retroweaver-rt-1.2.4.jar" />
      </classpath>
    </taskdef>

    <delete quiet="true">
      <fileset dir="." includes="${jar-jdk14.file}" />
      <fileset dir="${testclasses-jdk14.dir}" />
      <fileset dir="." includes="${lib.dir}/olap4j-jdk14.jar" />
    </delete>

    <mkdir dir="${testclasses-jdk14.dir}"/>

    <retroweaver inputjar="${jar.file}" outputjar="${jar-jdk14.file}" />
    <retroweaver srcdir="${testclasses.dir}" destdir="${testclasses-jdk14.dir}" />
    <retroweaver inputjar="${lib.dir}/olap4j.jar" outputjar="${lib.dir}/olap4j-jdk14.jar" />
  </target>

</project>

<!-- End build.xml -->
