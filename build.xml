<!--
  == $Id$
  == This software is subject to the terms of the Common Public License
  == Agreement, available at the following URL:
  == http://www.opensource.org/licenses/cpl.html.
  == (C) Copyright 2001-2002 Kana Software, Inc. and others.
  == All Rights Reserved.
  == You must accept the terms of that agreement to use this software.
  == jhyde, 31 October, 2001
  -->
<project name="mondrian" default="compile">
  <property environment="myenv"/>
  <property name="project.location" location="."/>
  <property name="lib.location" location="${project.location}/lib"/>
  <property file="${project.location}/build.properties"/>
  <property file="${project.location}/mondrian.properties"/>
  <property name="project.build.debug" value="on"/>
  <property name="Name" value="Mondrian"/>
  <property name="name" value="mondrian"/>
  <property name="version" value="0.3"/>

  <!--
    ===================================================================
    Set the properties related to paths
    ===================================================================
  -->
  <property name="src.dir" value="src"/>
  <property name="java.dir" value="${src.dir}/main"/>
  <property name="etc.dir" value="${src.dir}/etc"/>
  <property name="lib.dir" value="lib"/>
  <property name="doc.dir" value="doc"/>
  <property name="resource.location" location="resource"/>
  <property name="javadoc.dir" value="${doc.dir}/api"/>
  <property name="classes.dir" value="classes"/>
  <property name="dist.name" value="${name}-${version}"/>
  <property name="dist.base" value="distribution"/>
  <property name="dist.dir" value="dist"/>
  <property name="demo.dir" value="demo"/>
  <property name="webapp.dir" value="webapp"/>
  <property name="dist.src.file" value="${dist.dir}/${dist.name}-src.zip"/>
  <property name="dist.data.file" value="${dist.dir}/${name}-data.zip"/>
  <property name="dist.bin.file" value="${dist.dir}/${dist.name}-bin.zip"/>
  <property name="jar.file" value="${lib.dir}/${name}.jar"/>
  <property name="workbench.jar.file" value="workbench.jar"/>
  <property name="boot.jar.file" value="${lib.dir}/boot.jar"/>
  <property name="war.file" value="${lib.dir}/mondrian.war"/>
  <property name="jdk.home" value="${myenv.JAVA_HOME}"/>
  <property name="tomcat.home" value="${myenv.TOMCAT_HOME}"/>
  <property name="xalan.home" value="${myenv.XALAN_HOME}"/>
  <property name="junit.home" value="${myenv.JUNIT_HOME}"/>
  <property name="weblogic.home" value="${myenv.WEBLOGIC_HOME}"/>
  <property name="generated.java.files" value="
${java.dir}/mondrian/olap/Parser.java,
${java.dir}/mondrian/olap/ParserSym.java,
${java.dir}/mondrian/resource/ResourceDef.java,
${java.dir}/mondrian/olap/MondrianDef.java,
${java.dir}/mondrian/xom/MetaDef.java,
${java.dir}/mondrian/olap/MondrianResource*.java,
${java.dir}/mondrian/olap/MondrianResource*.properties,
${etc.dir}/mondrian/web/jsp/**/*.java"/>
  <property name="generated.lib.files" value="
${lib.dir}/mondrian.jar,
${lib.dir}/mondrian.war,
${lib.dir}/web.xml,
${lib.dir}/ant.jar,
${lib.dir}/optional.jar,
${lib.dir}/xercesImpl.jar,
${lib.dir}/xml-apis.jar"/>

  <path id="project.classpath">
    <pathelement location="${classes.dir}"/>
    <pathelement location="${tomcat.home}/common/lib/servlet.jar"/>
    <pathelement location="${lib.dir}/javacup.jar"/>
    <pathelement location="${lib.dir}/mof.jar"/>
    <pathelement location="${lib.dir}/jmi.jar"/>
    <pathelement location="${xalan.home}/bin/xalan.jar"/>
    <pathelement location="${junit.home}/junit.jar"/>
    <!-- CLASSPATH must contain xml-apis.jar, xercesImpl.jar, javacup.jar -->
    <pathelement path="${myenv.CLASSPATH}"/>
    <!-- Weblogic must be after xml-apis.jar and xercesImpl.jar, because it
         contains an incompatible version of xerces. -->
    <pathelement location="${weblogic.home}/lib/weblogic.jar"/>
    <pathelement location="${ant.home}/lib/ant.jar"/>
    <pathelement location="${ant.home}/lib/optional.jar"/>
  </path>

  <path id="project.boot.classpath">
    <path refid="project.classpath"/>
    <pathelement location="${boot.jar.file}"/>
  </path>

  <taskdef name="javacup" classname="java_cup.JavaCUPTask"/>
  <taskdef name="xomgen" classname="mondrian.xom.XOMGenTask">
    <classpath refid="project.boot.classpath"/>
  </taskdef>

  <target name="sniff"
        description="Figures out which components are available">
    <available property="weblogic.available"
        classname="weblogic.jspc"
        classpathref="project.classpath"/>
  </target>

  <!--
    ===================================================================
    Properties for running the FoodMart test. (Override them by
    editing mondrian.properties)
    ===================================================================
  -->

  <!-- Comma-separated list of jdbc drivers. Typical drivers:
       sun.jdbc.odbc.JdbcOdbcDriver, org.hsqldb.jdbcDriver,
       oracle.jdbc.OracleDriver, com.mysql.jdbc.Driver. Remember to
       include the driver on your CLASSPATH! -->
  <property name="mondrian.jdbcDrivers"
      value="sun.jdbc.odbc.JdbcOdbcDriver"/>
  <!-- Connect string to the relational database. -->
  <property name="mondrian.foodmart.jdbcURL.access"
      value="jdbc:odbc:MondrianFoodMart"/>
  <property name="mondrian.foodmart.jdbcURL.hsqldb"
      value="jdbc:hsqldb:demo/hsql/FoodMart"/>
  <property name="mondrian.foodmart.jdbcURL.mysql"
      value="jdbc:mysql://localhost/foodmart?user=foodmart&#38;password=foodmart"/>
  <property name="mondrian.foodmart.jdbcURL.oracle"
      value="jdbc:oracle:oci8:foodmart/foodmart@realm1"/>
  <property name="mondrian.foodmart.jdbcURL.postgres"
      value="jdbc:??"/>
  <property name="mondrian.foodmart.jdbcURL"
      value="${mondrian.foodmart.jdbcURL.access}"/>
  <!-- URL of the catalog definition. -->
  <property name="mondrian.foodmart.catalogURL"
      value="file:///${project.location}/${demo.dir}/FoodMart.xml"/>

  <target name="help">
      <echo>
      You must specify a specific project target when using the ANT build.
      Targets are one of the following:
      - all
          Cleans, compiles all classes, and runs a simple test.
      - compile
          Compiles functional classes only.
      - clean
          Deletes build output.
      - test
          Runs a simple test.
      </echo>
  </target>

  <target name="all" depends="clean,compile,test"/>

  <target name="clean">
      <delete includeEmptyDirs="true" quiet="true">
          <fileset dir="${classes.dir}" includes="**/*.class,**/*.properties"/>
          <fileset dir="." includes="${generated.java.files},${generated.lib.files}"/>
      </delete>
  </target>

  <target name="prepare">
    <mkdir dir="${classes.dir}"/>
  </target>

  <target name="compile" depends="
sniff,
prepare,
parser,
compile.xom,
generate.resources,
def,
compile.jsp.maybe,
compile.java,
copy.properties"/>

  <target name="compile.xom">
    <javac
        srcdir="${java.dir}"
        destdir="${classes.dir}"
        debug="${project.build.debug}"
        classpathref="project.classpath">
      <include name="mondrian/xom/**/*.java" />
    </javac>
  </target>

  <target name="compile.resgen">
    <xomgen
        model="${java.dir}/mondrian/resource/Resource.xml"
        destdir="${java.dir}"
        classname="mondrian.resource.ResourceDef"
        dtdname="Resource.dtd"/>
    <javac
        srcdir="${java.dir}"
        destdir="${classes.dir}"
        debug="${project.build.debug}"
        classpathref="project.classpath">
      <include name="mondrian/resource/*.java" />
    </javac>
  </target>

  <target name="generate.resources" depends="compile.resgen">
    <taskdef name="resgen" classname="mondrian.resource.ResourceGenTask">
      <classpath refid="project.classpath"/>
    </taskdef>

    <resgen srcdir="${java.dir}">
      <include name="mondrian/olap/MondrianResource.xml"/>
    </resgen>

  </target>

  <target name="compile.java">
    <javac
        srcdir="${java.dir}"
        destdir="${classes.dir}"
        debug="${project.build.debug}"
        classpathref="project.classpath">
      <include name="mondrian/**/*.java" />
    </javac>
  </target>

  <target name="copy.properties">
    <copy todir="${classes.dir}">
      <fileset dir="${java.dir}" includes="**/*.properties"/>
    </copy>
  </target>

  <target name="parser">
    <javacup
        srcdir="${java.dir}"
        input="${java.dir}/mondrian/olap/Parser.cup"
        interface="true"/>
  </target>

  <target name="def">
    <xomgen
        model="${java.dir}/mondrian/xom/Meta.xml"
        destdir="${java.dir}"
        classname="mondrian.xom.MetaDef"
        dtdname="meta.dtd"/>
    <xomgen
        model="${java.dir}/mondrian/olap/Mondrian.xml"
        destdir="${java.dir}"
        classname="mondrian.olap.MondrianDef"
        dtdname="mondrian.dtd"/>
  </target>

  <target name="compile.jsp.maybe" depends="compile.java"
      if="weblogic.available"
      description="Compiles jsp pages, but only if weblogic is available">
    <antcall target="compile.jsp"/>
  </target>

  <target name="compile.jsp"
      description="Compiles jsp pages, fails if weblogic is not available.">
    <mkdir dir="${etc.dir}"/>
    <wljspc src="${webapp.dir}" dest="${etc.dir}"
        package="mondrian.web.jsp">
      <classpath refid="project.classpath"/>
      <include name="**/*.jsp"/>
    </wljspc>
  </target>

  <!-- Before you run it, you will need to set the
       "mondrian.jdbcDrivers", "mondrian.foodmart.jdbcURL", and
       "mondrian.foodmart.catalogURL" properties.  -->

  <target name="FoodMartTest"
      description="Runs a few queries using the FoodMart schema.">
    <java classpathref="project.classpath" classname="mondrian.test.Main"
        fork="yes">
      <jvmarg value="-Dmondrian.jdbcDrivers=${mondrian.jdbcDrivers}"/>

      <!-- mondrian.test.connectString is the mondrian connect-string.
           Provider must be 'mondrian'. Jdbc is the  Catalog is the  -->
      <jvmarg value="-Dmondrian.test.connectString=Provider=mondrian;Jdbc=${mondrian.foodmart.jdbcURL};Catalog=${mondrian.foodmart.catalogURL}"/>
    </java>
  </target>

  <!-- Same prerequisites as FoodMartTest -->
  <target name="test" description="Runs all JUnit tests.">
    <antcall target="test-dbms"/>
  </target>

  <target name="test-access" description="Runs all JUnit tests on Access.">
    <antcall target="test-dbms">
      <param name="mondrian.foodmart.jdbcURL" value="${mondrian.foodmart.jdbcURL.access}"/>
    </antcall>
  </target>

  <target name="test-mysql" description="Runs all JUnit tests on MySQL.">
    <antcall target="test-dbms">
      <param name="mondrian.foodmart.jdbcURL" value="${mondrian.foodmart.jdbcURL.mysql}"/>
    </antcall>
  </target>

  <target name="test-oracle" description="Runs all JUnit tests on Oracle.">
    <antcall target="test-dbms">
      <param name="mondrian.foodmart.jdbcURL" value="${mondrian.foodmart.jdbcURL.oracle}"/>
    </antcall>
  </target>

  <target name="test-postgres" description="Runs all JUnit tests on Postgres.">
    <antcall target="test-dbms">
      <param name="mondrian.foodmart.jdbcURL" value="${mondrian.foodmart.jdbcURL.postgres}"/>
    </antcall>
  </target>

  <target name="test-dbms"
      description="
Runs all JUnit tests, using the given database connection
in {mondrian.foodmart.jdbcURL}.">
    <java classpathref="project.classpath" classname="mondrian.test.Main"
        fork="yes">
      <jvmarg value="-Dmondrian.jdbcDrivers=${mondrian.jdbcDrivers}"/>
      <jvmarg value="-Dmondrian.test.connectString=Provider=mondrian;Jdbc='${mondrian.foodmart.jdbcURL}';Catalog='${mondrian.foodmart.catalogURL}'"/>
    </java>
  </target>

<target name="junit-main" depends="compile">
        <mkdir dir="junit-results"/>
    <junit printsummary="yes" fork="yes" haltonfailure="no" >
        <classpath>
            <path refid="project.classpath"/>
        </classpath>
        <jvmarg value="-Dmondrian.jdbcDrivers=${mondrian.jdbcDrivers}"/>
        <jvmarg value="-Dmondrian.test.connectString=Provider=mondrian;Jdbc='${mondrian.foodmart.jdbcURL}';Catalog='${mondrian.foodmart.catalogURL}'"/>
        <formatter type="xml" />

        <batchtest fork="yes" todir="junit-results">
            <fileset dir="classes">
              <include name="mondrian/test/**/*Test*.class" />
              <exclude name="mondrian/test/**/*Testable*.class" />
              <exclude name="mondrian/test/**/*TestContext*.class" />
            </fileset>
        </batchtest>
    </junit>

    <junitreport todir="junit-results">
      <fileset dir="junit-results">
        <include name="TEST-*.xml"/>
      </fileset>
      <report format="frames" todir="junit-results/html"/>
    </junitreport>

  </target>

  <target name="etags">
    <exec dir="${project.location}" executable="find" output="javaFiles">
      <arg line=". -name &quot;*.java&quot; -print"/>
    </exec>
    <exec dir="${project.location}" executable="ctags">
      <arg line="-e"/>
      <arg line="-L javaFiles"/>
    </exec>
    <delete file="${project.location}/javaFiles" quiet="true"/>
  </target>

  <target name="srczip">
    <mkdir dir="${dist.dir}" />
    <delete file="${dist.src.file}"/>
    <zip
        zipfile="${dist.src.file}"
        update="true">
      <zipfileset
          dir="."
          prefix="${dist.name}"
          includes="**/*.java,
**/*.cup,
**/*.html,
**/*.css,
${java.dir}/**/*.properties,
${java.dir}/mondrian/resource/Resource.xml,
${java.dir}/mondrian/olap/Mondrian.xml,
${java.dir}/mondrian/xom/Meta.xml,
${java.dir}/javax/jmi/model/resources/mof.xml,
${lib.dir}/javacup.jar,
${lib.dir}/boot.jar,
${webapp.dir}/WEB-INF/web.xml,
${webapp.dir}/**/*.jsp,
${webapp.dir}/WEB-INF/*.xsl,
${webapp.dir}/WEB-INF/*.tld,
resource/*.xml,
sresource/*.xsl,
build.xml,
build.bat,
build.properties,
LICENSE.html,
README.txt,
VERSION.txt,
${demo.dir}/FoodMart.xml"
          excludes="${javadoc.dir}/**,
**/*~,
${generated.java.files}" />
    </zip>
  </target>

  <target name="datazip">
    <mkdir dir="${dist.dir}" />
    <delete file="${dist.data.file}"/>
    <zip
        zipfile="${dist.data.file}"
        update="true">
      <!-- We do not use 'prefix="${dist.name}"', cuz we don't want to issue a
           new data file each release. -->
      <zipfileset
          dir="."
          includes="LICENSE.html,
README.txt,
VERSION.txt,
demo/FoodMartData.sql,
demo/FoodMartTables.sql,
demo/FoodMartIndexes.sql,
demo/oracle/FoodMartData.sql,
demo/oracle/FoodMartTables.sql,
demo/oracle/FoodMartIndexes.sql,
demo/oracle/FoodMart.dmp,
demo/access/MondrianFoodMart.mdb,
demo/**/*.pl,
demo/**/*.sh"
          excludes="demo/FoodMart.xml,
**/*~"/>
    </zip>
  </target>

  <target name="export.foodmart.oracle">
    <exec dir="${demo.dir}/oracle" executable="${myenv.ORACLE_HOME}/bin/exp">
      <arg line="userid=foodmart/foodmart@realm1"/>
      <arg line="file=FoodMart.dmp"/>
      <arg line="owner=FOODMART"/>
    </exec>
  </target>

  <target name="binzip" depends="compile,javadoc,jar,copy-jars">
    <mkdir dir="${dist.dir}" />
    <delete file="${dist.bin.file}"/>
    <zip zipfile="${dist.bin.file}">
      <zipfileset
          dir="."
          prefix="${dist.name}"
          includes="
${doc.dir}/**/*,
${webapp.dir}/**,
${demo.dir}/FoodMart.xml,
bin/mondrian.properties,
bin/runtime.xml,
bin/mondrian.bat,
LICENSE.html,
README.txt,
VERSION.txt"
          excludes="**/*~"/>
      <!-- Files needed to run mondrian, ant, junit in runtime environment. -->
      <zipfileset
          dir="${lib.dir}"
          prefix="${dist.name}/lib"
          includes="
${name}.jar,
javacup.jar,
ant.jar,
optional.jar,
xercesImpl.jar,
xml-apis.jar,
xalan.jar,
junit.jar"/>
    </zip>
  </target>

  <target name="jar">
    <mkdir dir="${lib.dir}" />
    <zip
        zipfile="${jar.file}"
        update="true">
      <zipfileset
          dir="${classes.dir}"
          includes="
**/*.class,
**/*.properties"/>
      <zipfileset
          dir="."
          includes="
LICENSE.html,
README.txt,
VERSION.txt"/>
    </zip>
  </target>

  <target name="bootjar"
      description="Builds a jar file of the classes we need in order to run ant; when the new versions have built, we can replace them. Run this target when the bootstrap files have changed so much that you can't bootstrap, and you need o generate a new boot.jar to check in to source control.">
    <mkdir dir="${lib.dir}" />
    <delete file="${boot.jar.file}"/>
    <jar jarfile="${boot.jar.file}">
      <fileset
          dir="${classes.dir}"
          includes="mondrian/xom/**/*.class,
mondrian/resource/**/*.class"/>
    </jar>
  </target>

  <target name="javadoc">
    <mkdir dir="${javadoc.dir}" />
    <delete quiet="true" file="${javadoc.dir}/index.html"/>
    <javadoc sourcepath="${java.dir}"
        classpathref="project.classpath"
        destdir="${javadoc.dir}"
        packagenames="mondrian.*"
        overview="${java.dir}/overview.html"
        footer="&lt;a href=&quot;http://sourceforge.net/projects/mondrian&quot;&gt;&lt;img src=&quot;http://sourceforge.net/sflogo.php?group_id=35302&#38;type=1&quot; width=&quot;88&quot; height=&quot;31&quot; border=&quot;0&quot; alt=&quot;SourceForge.net_Logo&quot;&gt;&lt;/a&gt;"
        author="true">
        <link href="http://java.sun.com/j2se/1.4/docs/api/"/>
        <link href="http://www.junit.org/junit/javadoc/3.7/"/>
        <link href="http://java.sun.com/products/servlet/2.2/javadoc/"/>
    </javadoc>
    <copy file="${java.dir}/mondrian/xom/meta.xml"
        todir="${javadoc.dir}/mondrian/xom"/>
    <copy file="${java.dir}/mondrian/resource/resource.xml"
        todir="${javadoc.dir}/mondrian/resource"/>
    <copy file="${java.dir}/mondrian/olap/mondrian.xml"
        todir="${javadoc.dir}/mondrian/olap"/>
  </target>

  <target name="upload-javadoc" depends="javadoc" description="
Copies javadoc to sourceforge, where it will be accessible via
http://mondrian.sourceforge.net/api/index.html.
You should set pscp.user, pscp.password and pscp.path in build.properties">
    <exec executable="pscp.exe">
      <arg line="-pw ${pscp.password}"/>
      <arg line="-r ${javadoc.dir}"/>
      <arg line="${pscp.user}:${pscp.path}"/>
    </exec>
  </target>

  <target name="webapp" depends="compile,jar,copy-jars,war"
    description="Creates mondrian.war in a build environment."/>

  <target name="copy-jars" description="
Copy .jar files into lib, so that the same files are available to
build mondrian.war as in the runtime environment.">
    <copy todir="${lib.dir}">
      <fileset dir="${junit.home}" includes="junit.jar"/>
      <fileset dir="${ant.home}/lib" includes="ant.jar,optional.jar"/>
      <fileset dir="${xalan.home}/bin" includes="xalan.jar,xml-apis.jar,xercesImpl.jar"/>
    </copy>
  </target>

  <target name="war" description="
Creates mondrian.war.
Assumes that mondrian.jar exists (use 'jar' target),
and lib contains ant.jar, junit.jar etc. (use 'copy-jars' target)">
    <filter filtersfile="mondrian.properties"/>
    <mkdir dir="${lib.dir}" />
    <delete file="${war.file}"/>
    <delete file="${lib.dir}/web.xml"/>
    <copy file="${webapp.dir}/WEB-INF/web.xml"
        filtering="true" todir="${lib.dir}"/>
    <war warfile="${war.file}"
        webxml="${lib.dir}/web.xml">
      <fileset dir="${webapp.dir}" excludes="${webapp.dir}/WEB-INF/web.xml"/>
      <lib dir="${lib.dir}" includes="
${name}.jar,
javacup.jar,
xalan.jar,
xml-apis.jar,
xercesImpl.jar
junit.jar"/>
    </war>
  </target>

  <target name="deploy-webapp" depends="webapp">
    <delete dir="${tomcat.home}/webapps/mondrian"/>
    <copy file="${war.file}"
        todir="${tomcat.home}/webapps"/>
  </target>

  <!-- targets to start and stop tomcat -->

  <!-- I had to take the 'C:' off these paths, otherwise the path got truncated
       to just the first element. Any ideas, anyone? -->
  <path id="tomcat.classpath">
    <pathelement path="/jdk1.3.1_02/lib/tools.jar"/>
    <pathelement path="/jakarta-tomcat-4.0.3/localhost/work/classes"/>
    <pathelement path="/jakarta-tomcat-4.0.3/bin/bootstrap.jar"/>
    <pathelement path="/oracle/ora81/jdbc/lib/classes12.zip"/>
    <pathelement path="/MySQL/lib/mysql-connector-java-2.0.14-bin.jar"/>
  </path>

  <target name="start.tomcat">
    <property name="foo" refid="tomcat.classpath"/>
    <echo message="classpath is ${foo}"/>
    <java classpathref="tomcat.classpath"
          classname="org.apache.catalina.startup.Bootstrap"
          dir="${tomcat.home}/bin"
          fork="yes">
      <sysproperty key="catalina.base" value=".."/>
      <sysproperty key="catalina.home" value=".."/>
      <sysproperty key="java.io.tmpdir" value="../temp"/>
      <sysproperty key="java.endorsed.dirs" value="../bin;../common/lib"/>
      <arg value="start"/>
    </java>
  </target>

  <target name="debug.tomcat">
    <java classpathref="tomcat.classpath"
          classname="org.apache.catalina.startup.Bootstrap"
          dir="${tomcat.home}/bin"
          fork="yes">
      <sysproperty key="catalina.base" value=".."/>
      <sysproperty key="catalina.home" value=".."/>
      <sysproperty key="java.io.tmpdir" value="../temp"/>
      <sysproperty key="java.endorsed.dirs" value="../bin;../common/lib"/>
      <jvmarg value="-Xdebug"/>
      <jvmarg value="-Xrunjdwp:transport=dt_socket,address=5000,server=y,suspend=n"/>
      <arg value="start"/>
    </java>
  </target>

  <target name="stop.tomcat">
    <java classpathref="tomcat.classpath"
          classname="org.apache.catalina.startup.Bootstrap"
          dir="${tomcat.home}/bin"
          fork="yes">
      <sysproperty key="catalina.base" value=".."/>
      <sysproperty key="catalina.home" value=".."/>
      <sysproperty key="java.io.tmpdir" value="../temp"/>
      <sysproperty key="java.endorsed.dirs" value="../bin;../common/lib"/>
      <arg value="stop"/>
    </java>
  </target>

  <target name="setup-compile-farm">
    <echo>Copy junit</echo>
    <exec executable="pscp.exe">
      <arg line="-unsafe -q -v -pw ${cf.password} -r"/>
      <arg line="${junit.home}"/>
      <arg line="${cf.user}:${cf.path}/junit3.7"/>
    </exec>
    <echo>Copy ant</echo>
    <exec executable="pscp.exe">
      <arg line="-unsafe -q -v -pw ${cf.password} -r"/>
      <arg line="${ant.home}"/>
      <arg line="${cf.user}:${cf.path}/jakarta-ant-1.5"/>
    </exec>
    <echo>Copy xalan</echo>
    <exec executable="pscp.exe">
      <arg line="-unsafe -q -v -pw ${cf.password} -r"/>
      <arg line="${xalan.home}"/>
      <arg line="${cf.user}:${cf.path}/xalan-j_2_4_D1"/>
    </exec>
    <echo>Copy tomcat</echo>
    <exec executable="pscp.exe">
      <arg line="-unsafe -q -v -pw ${cf.password} -r"/>
      <arg line="${tomcat.home}"/>
      <arg line="${cf.user}:${cf.path}/jakarta-tomcat-4.0.4"/>
    </exec>
  </target>

  <target name="workbench" depends="compile">
    <jar jarfile="${workbench.jar.file}" manifest="misc/workbench-manifest.mf">
      <fileset
          dir="${classes.dir}"
          includes="**/*.class"/>
      <fileset
          dir="."
          includes="images/*.*"/>
    </jar>
    
  </target>
</project>
